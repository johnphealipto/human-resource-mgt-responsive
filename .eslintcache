[{"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\index.js":"1","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\store.js":"2","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\App.js":"3","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reportWebVitals.js":"4","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\DashboardScreen.js":"5","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\LoginScreen.js":"6","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\PasswordScreen.js":"7","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\StaffListScreen.js":"8","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\StaffCreateScreen.js":"9","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\StaffEditScreen.js":"10","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\HomeScreen.js":"11","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\RoleEditScreen.js":"12","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\ProfileScreen.js":"13","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\NextOfKinScreen.js":"14","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\EducationScreen.js":"15","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\HrHomeScreen.js":"16","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\AdminProfileScreen.js":"17","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\AdminNextOfKinScreen.js":"18","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\AdminEducationScreen.js":"19","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\MyLeaveApplicationScreen.js":"20","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\ForgotPasswordScreen.js":"21","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\ResetPasswordScreen.js":"22","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\AllLeaveApplications.js":"23","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\UpdateMyLeave.js":"24","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reducers\\userReducers.js":"25","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reducers\\profileReducers.js":"26","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reducers\\nextOfKinReducer.js":"27","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reducers\\educationReducers.js":"28","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reducers\\leaveApplication.js":"29","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\Message.js":"30","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\AdminHeader2.js":"31","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\Loader.js":"32","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\SearchBox.js":"33","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\Paginate.js":"34","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\FixedNavbar.js":"35","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\Header.js":"36","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\actions\\userActions.js":"37","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\actions\\leaveApplication.js":"38","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\constants\\userConstants.js":"39","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\constants\\leaveApplicationConstants.js":"40","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\constants\\nextOfKinConstants.js":"41","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\constants\\educationConstants.js":"42","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\constants\\profileConstants.js":"43","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\actions\\educationActions.js":"44","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\AdminHeader.js":"45","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\actions\\nextOfKinActions.js":"46","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\actions\\profileActions.js":"47","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\shared\\baseUrl.js":"48"},{"size":614,"mtime":1615551217846,"results":"49","hashOfConfig":"50"},{"size":3178,"mtime":1615551217943,"results":"51","hashOfConfig":"50"},{"size":3624,"mtime":1615563129149,"results":"52","hashOfConfig":"50"},{"size":375,"mtime":1615551217852,"results":"53","hashOfConfig":"50"},{"size":7633,"mtime":1615551217859,"results":"54","hashOfConfig":"50"},{"size":4854,"mtime":1615553625824,"results":"55","hashOfConfig":"50"},{"size":6780,"mtime":1615551217867,"results":"56","hashOfConfig":"50"},{"size":5328,"mtime":1615551217873,"results":"57","hashOfConfig":"50"},{"size":9857,"mtime":1615551217871,"results":"58","hashOfConfig":"50"},{"size":10580,"mtime":1615551217872,"results":"59","hashOfConfig":"50"},{"size":4167,"mtime":1615551217862,"results":"60","hashOfConfig":"50"},{"size":8322,"mtime":1615551217870,"results":"61","hashOfConfig":"50"},{"size":14713,"mtime":1615551217868,"results":"62","hashOfConfig":"50"},{"size":10845,"mtime":1615551217866,"results":"63","hashOfConfig":"50"},{"size":8770,"mtime":1615551217860,"results":"64","hashOfConfig":"50"},{"size":2752,"mtime":1615551217863,"results":"65","hashOfConfig":"50"},{"size":21435,"mtime":1615551217855,"results":"66","hashOfConfig":"50"},{"size":12324,"mtime":1615551217854,"results":"67","hashOfConfig":"50"},{"size":11753,"mtime":1615551217853,"results":"68","hashOfConfig":"50"},{"size":7900,"mtime":1615551217865,"results":"69","hashOfConfig":"50"},{"size":4453,"mtime":1615551217861,"results":"70","hashOfConfig":"50"},{"size":4348,"mtime":1615551217869,"results":"71","hashOfConfig":"50"},{"size":2768,"mtime":1615563804650,"results":"72","hashOfConfig":"50"},{"size":6481,"mtime":1615551217873,"results":"73","hashOfConfig":"50"},{"size":6633,"mtime":1615551217851,"results":"74","hashOfConfig":"50"},{"size":3186,"mtime":1615551217850,"results":"75","hashOfConfig":"50"},{"size":3050,"mtime":1615551217849,"results":"76","hashOfConfig":"50"},{"size":3286,"mtime":1615551217847,"results":"77","hashOfConfig":"50"},{"size":3971,"mtime":1615551217848,"results":"78","hashOfConfig":"50"},{"size":295,"mtime":1615551217813,"results":"79","hashOfConfig":"50"},{"size":5827,"mtime":1615551217803,"results":"80","hashOfConfig":"50"},{"size":504,"mtime":1615551217812,"results":"81","hashOfConfig":"50"},{"size":872,"mtime":1615551217815,"results":"82","hashOfConfig":"50"},{"size":760,"mtime":1615551217814,"results":"83","hashOfConfig":"50"},{"size":3167,"mtime":1615551217806,"results":"84","hashOfConfig":"50"},{"size":5681,"mtime":1615551217810,"results":"85","hashOfConfig":"50"},{"size":12657,"mtime":1615551217791,"results":"86","hashOfConfig":"50"},{"size":5801,"mtime":1615551217783,"results":"87","hashOfConfig":"50"},{"size":2700,"mtime":1615551217822,"results":"88","hashOfConfig":"50"},{"size":1850,"mtime":1615551217819,"results":"89","hashOfConfig":"50"},{"size":1238,"mtime":1615551217820,"results":"90","hashOfConfig":"50"},{"size":1480,"mtime":1615551217817,"results":"91","hashOfConfig":"50"},{"size":1398,"mtime":1615551217821,"results":"92","hashOfConfig":"50"},{"size":5076,"mtime":1615551217780,"results":"93","hashOfConfig":"50"},{"size":4641,"mtime":1615551217800,"results":"94","hashOfConfig":"50"},{"size":4898,"mtime":1615551217785,"results":"95","hashOfConfig":"50"},{"size":4980,"mtime":1615551217788,"results":"96","hashOfConfig":"50"},{"size":62,"mtime":1615551217874,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"etvzfx",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"100"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"100"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"100"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"100"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"100"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"100"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"100"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"100"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"100"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\index.js",[],["212","213"],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\store.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\App.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reportWebVitals.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\DashboardScreen.js",["214","215","216","217"],"import React, { useEffect, useState } from 'react'\r\nimport { Row, Col, Button, Form, ListGroup } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport FixedNavbar from '../components/FixedNavbar';\r\nimport '../styles/ProfileScreen.css';\r\nimport Header from '../components/Header';\r\n\r\nconst DashboardScreen = ({ history }) => {\r\n    const [firstname, setFirstname] = useState('')\r\n    const [middlename, setMiddlename] = useState('')\r\n    const [lastname, setLastname] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n   \r\n    const [employeeCode, setEmployeeCode] = useState('')\r\n   \r\n    \r\n    const [department, setDepartment] = useState('')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { loading, error, user } = userDetails\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(!userInfo) {\r\n            history.push('/')\r\n        } else {\r\n           if(success) {\r\n               dispatch({\r\n                   type: USER_UPDATE_PROFILE_RESET\r\n               })\r\n               history.push('/')\r\n           } else {\r\n            if(!user || !user.firstname) {\r\n                dispatch(getUserDetails('me'))\r\n            } else {\r\n                setFirstname(user.firstname)\r\n                setLastname(user.lastname)\r\n                setMiddlename(user.middlename)\r\n             \r\n               \r\n                setDepartment(user.department)\r\n               \r\n                setEmployeeCode(user.employeeCode)\r\n\r\n            }\r\n        }\r\n        }\r\n        \r\n    }, [dispatch, history, user, success, userInfo])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if(password !== confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n        dispatch(updateUserProfile({\r\n            _id: user._id,\r\n            firstname,\r\n            lastname,\r\n            password,\r\n            middlename,\r\n           \r\n          \r\n        }))\r\n         }\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n                <Col md={4} lg={2} className='d-none d-md-block'>\r\n\t\t\t\t\t<FixedNavbar />\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={12} md={8} lg={10}>\r\n                <Header />\r\n                <h1 className='page-header'>Personal Details</h1>\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {success && <Message variant='success'>Profile Updated</Message>}\r\n              \r\n                <Form onSubmit={submitHandler} className=\"form-shadow\">\r\n                    <Form.Row>\r\n                        <Form.Group  className=\"col-md-4\" controlId='firstname'>\r\n                            <Form.Label>First Name</Form.Label>\r\n                            <Form.Control \r\n                            type='firstname' \r\n                           \r\n                            placeholder='Enter First name'\r\n                            value={firstname}\r\n                            onChange={(e) => setFirstname(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group  className=\"col-md-4\" controlId='middlename'>\r\n                            <Form.Label>Middle Name</Form.Label>\r\n                            <Form.Control \r\n                            type='middlename' \r\n                            \r\n                            placeholder='Enter Middle name'\r\n                            value={middlename}\r\n                            onChange={(e) => setMiddlename(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group  className=\"col-md-4\" controlId='lastname'>\r\n                            <Form.Label>Last Name</Form.Label>\r\n                            <Form.Control \r\n                            type='lastname' \r\n                            \r\n                            placeholder='Enter Last name'\r\n                            value={lastname}\r\n                            onChange={(e) => setLastname(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        \r\n                  \r\n                        \r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group  className=\"col-md-6\" controlId='department'>\r\n                            <Form.Label>Department</Form.Label>\r\n                            <Form.Control \r\n                            type='department' \r\n                           readOnly\r\n                            placeholder='Enter Department'\r\n                            value={department}\r\n                            onChange={(e) => setDepartment(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group  className=\"col-md-6\" controlId='employeeCode'>\r\n                            <Form.Label>Employee Code</Form.Label>\r\n                            <Form.Control \r\n                            type='employeeCode' \r\n                            readOnly\r\n                            placeholder='Enter Employee Code'\r\n                            value={employeeCode}\r\n                            onChange={(e) => setEmployeeCode(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                      \r\n                  \r\n                        \r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                    <Form.Group className=\"col-md-6\" controlId='password'>\r\n                        <Form.Label>New Password</Form.Label>\r\n                        <Form.Control \r\n                        type='password' \r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"col-md-6\" controlId='confirrmPassword'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control \r\n                        type='password' \r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n                    </Form.Row>\r\n                   \r\n                    <Button type='submit' variant='primary' className='btn-block'>\r\n                        Update\r\n                    </Button>\r\n                </Form>\r\n                \r\n            </Col>\r\n            \r\n        </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DashboardScreen;\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\LoginScreen.js",["218","219","220","221","222"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { useForm } from \"react-hook-form\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { ScaleLoader } from 'react-spinners';\r\nimport Message from '../components/Message';\r\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\r\nimport LoginImg from '../img/call-center.jpg';\r\nimport Logo from '../img/outcess-logo.png';\r\nimport '../styles/LoginScreen.css';\r\nimport { login } from '../actions/userActions';\r\nimport { css } from '@emotion/css';\r\nimport { USER_FORGOT_PASSWORD_RESET } from '../constants/userConstants';\r\n\r\n\r\nconst eye = <FontAwesomeIcon icon={faEye} />;\r\n\r\n\r\n//Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\nconst LoginTestScreen = ({ history }) => {\r\n\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n  const togglePasswordVisiblity = () => {\r\n    setPasswordShown(passwordShown ? false : true);\r\n  };\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { loading, error, userInfo } = userLogin\r\n\r\n    \r\n    useEffect(() => {\r\n        if(userInfo) {\r\n          \r\n            history.push('/home')\r\n        } else {\r\n          dispatch({\r\n            type: USER_FORGOT_PASSWORD_RESET\r\n          })\r\n        }\r\n    }, [history, userInfo])\r\n    \r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(login(email, password))\r\n    }\r\n  return (\r\n    <div className=\"loginpage-wrapper\">\r\n      <Container className='loginpage-container'>\r\n        <Row>\r\n          <Col className='d-none d-lg-block col-xs-none col-lg-6'>\r\n            <div className='login-img'>\r\n              <img src={LoginImg}/>\r\n            </div>\r\n          </Col>\r\n          <Col className='loginform-col col-xs-12 col-lg-6'>\r\n            <div className='logo'>\r\n              <img src={Logo}/>\r\n            </div>\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            <Form onSubmit={submitHandler}>\r\n              <Form.Group className='form-group email' controlId=\"formBasicEmail\">\r\n                <i class=\"fas fa-user pr-3\"></i>\r\n                <Form.Label className='login-label'></Form.Label>\r\n                {/* <Form.Control \r\n                    autoFocus \r\n                    type=\"email\" \r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    placeholder=\"Enter email\" /> */}\r\n\r\n     <div className=\"form\">\r\n      <input \r\n      type=\"email\"\r\n      id=\"email\" \r\n      value={email}\r\n      onChange={(e) => setEmail(e.target.value)}\r\n      className=\"form__input\" \r\n      autocomplete=\"true\" \r\n      placeholder=\" \"/>\r\n       <label for=\"email\" class=\"form__label\">Email</label>\r\n                    </div>\r\n              </Form.Group>\r\n\r\n              <Form.Group className='form-group password' controlId=\"formBasicPassword\">\r\n                <i class=\"fas fa-unlock pr-3\"></i>\r\n                <Form.Label className='login-label'></Form.Label>\r\n                {/* <Form.Control \r\n                    type=\"password\" \r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    placeholder=\"Password\" /> */}\r\n  <div className=\"form pass-wrapper\">\r\n      <input \r\n      type=\"password\"\r\n      name=\"password\"\r\n      type={passwordShown ? \"text\" : \"password\"}\r\n      value={password}\r\n      onChange={(e) => setPassword(e.target.value)}\r\n      className=\"form__input\" \r\n      autocomplete=\"true\" \r\n      placeholder=\" \"/>\r\n      <i onClick={togglePasswordVisiblity}>{eye}</i>{\" \"}\r\n  <label for=\"password\" className=\"form__label\">Password</label>\r\n   </div>\r\n\r\n              </Form.Group>\r\n              <Button type='submit' variant='primary' className='btn btn-block'>\r\n                    Sign In\r\n                </Button>\r\n                <Link to='/forgotpassword' className='forget-password'>\r\n                    <p>Forgot password?</p>\r\n                </Link>\r\n            </Form>\r\n            <div className=\"loading\">\r\n              {loading &&\r\n                <ScaleLoader\r\n                css={override}\r\n                sizeUnit={\"px\"}\r\n                size={150}\r\n                color={\"#123abc\"}\r\n                loading={loading}\r\n                />\r\n              }\r\n              \r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginTestScreen;","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\PasswordScreen.js",["223","224"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Row, Col, ListGroup, Toast, Nav } from 'react-bootstrap'\r\nimport { Link, NavLink} from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport { updateUserPassword } from '../actions/userActions'\r\nimport { USER_UPDATE_PASSWORD_RESET } from '../constants/userConstants';\r\nimport '../styles/FixedNavbar.css';\r\nimport AdminHeader2 from '../components/AdminHeader2';\r\nimport '../styles/ProfileScreen.css';\r\n\r\n\r\nconst PasswordScreen = ({ history }) => {\r\n    const [currentPassword, setCurrentPassword] = useState('')\r\n    const [newPassword, setNewPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n    const [show, setShow] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userUpdatePassword = useSelector(state => state.userUpdatePassword)\r\n    const { error, success } = userUpdatePassword\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        if(!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if(success) {\r\n                dispatch({\r\n                    type: USER_UPDATE_PASSWORD_RESET\r\n                })\r\n                history.push('/home')\r\n            }\r\n        }\r\n    }, [dispatch, success, history, userInfo])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if(newPassword !== confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            //Dispatch\r\n            dispatch(updateUserPassword({\r\n                currentPassword,\r\n                newPassword\r\n            }))\r\n            //setShow(true)\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Row>\r\n        <Col xs={6}>\r\n        <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide>\r\n          <Toast.Header>\r\n            <img\r\n              src=\"holder.js/20x20?text=%20\"\r\n              className=\"rounded mr-2\"\r\n              alt=\"\"\r\n            />\r\n            <strong className=\"mr-auto\">Password Update</strong>\r\n            <small>1 mins ago</small>\r\n          </Toast.Header>\r\n          <Toast.Body>Your Password has been updated!</Toast.Body>\r\n        </Toast>\r\n         </Col>\r\n         </Row>\r\n\r\n        <Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n        <Col md={4} lg={2} className='d-none d-md-block'>\r\n        <div className=\"fixednavbar-wrapper\">\r\n      <div className='employee-details'>\r\n        <p>{userInfo.role}</p>\r\n        <p>{userInfo.email}</p>\r\n      </div>\r\n            <Nav className=\"flex-column\">\r\n            <NavLink to='/home' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-home pr-4\"></i>\r\n          Home\r\n        </NavLink>\r\n        <NavLink to='/dashboard' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"far fa-id-card pr-4\"></i>\r\n          Personal details\r\n        </NavLink>\r\n        <NavLink to='/updatepassword' exact className=\"nav-link\" activeClassName='active-here'>\r\n        <i class=\"fas fa-unlock pr-4\"></i>\r\n          Update Password\r\n        </NavLink>\r\n        <NavLink to='/dashboard' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-graduation-cap pr-4\"></i>\r\n          Education\r\n        </NavLink>\r\n        <NavLink to='/myleave' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-sign-out-alt pr-4\"></i>\r\n          My Leave\r\n        </NavLink>\r\n                {\r\n                    (userInfo.role === 'hr') && (\r\n                        <>\r\n                        <div className='admin-section'>\r\n            <p>Admin Section</p>\r\n          </div>\r\n          <NavLink to='/myleave' exact className=\"nav-link\" activeClassName='active-here'>\r\n            <i class=\"fas fa-box-open pr-4\"></i>\r\n            Leave Applications\r\n          </NavLink>\r\n          <NavLink to='/admin/userlist' exact className=\"nav-link\" activeClassName='active-here'>\r\n            <i class=\"fas fa-users pr-4\"></i>\r\n            All Employees\r\n          </NavLink>\r\n          <NavLink to='/admin/register' exact className=\"nav-link\" activeClassName='active-here'>\r\n            <i class=\"fas fa-user-plus pr-4\"></i>\r\n            Register Employee\r\n          </NavLink>\r\n                        </>\r\n                    )\r\n                }\r\n            </Nav>\r\n            </div>\r\n            </Col>\r\n\r\n\r\n            <Col xs={12} md={8} lg={10}>\r\n                <AdminHeader2 />\r\n                <h1 className='page-header'>Update Password</h1>\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {success && <Message variant='success'>Password Updated</Message>}\r\n               \r\n                <Form onSubmit={submitHandler} className=\"form-shadow\">\r\n                    <Form.Group controlId='crrentPassword'>\r\n                        <Form.Label>Current Password</Form.Label>\r\n                        <Form.Control \r\n                        type='password' \r\n                        placeholder='Enter Password'\r\n                        value={currentPassword}\r\n                        onChange={(e) => setCurrentPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group controlId='newpassword'>\r\n                        <Form.Label>New Password</Form.Label>\r\n                        <Form.Control \r\n                        type='password' \r\n                        placeholder='Enter New Password'\r\n                        value={newPassword}\r\n                        onChange={(e) => setNewPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='confirrmPassword'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control \r\n                        type='password' \r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                    </Button>\r\n                </Form>\r\n            </Col>\r\n            \r\n        </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PasswordScreen;\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\StaffListScreen.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\StaffCreateScreen.js",["225","226"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, ListGroup } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { listUsers, register } from '../actions/userActions';\r\nimport { USER_REGISTER_RESET } from '../constants/userConstants';\r\nimport FixedNavbar from '../components/FixedNavbar';\r\nimport Header from '../components/Header';\r\n\r\nconst StaffCreateScreen = ({ history }) => {\r\n    const [firstname, setFirstname] = useState('')\r\n    const [middlename, setMiddlename] = useState('')\r\n    const [lastname, setLastname] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [department, setDepartment] = useState('')\r\n    const [employeeCode, setEmployeeCode] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [role, setRole] = useState('')\r\n    \r\n    const [message, setMessage] = useState(null)\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { loading, error, success:successRegister } = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo  && (userInfo.role === 'hr' || userInfo.role === 'hr-manager' || userInfo.role === 'admin')) {\r\n           \r\n            if(successRegister) {\r\n                dispatch({\r\n                    type: USER_REGISTER_RESET\r\n                })\r\n                history.push('/admin/userlist')\r\n            }\r\n        } else {\r\n            history.push('/')\r\n        }\r\n        \r\n    }, [dispatch, history, userInfo, successRegister])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if(password !== confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(register(\r\n                firstname,\r\n                middlename,\r\n                lastname,\r\n                email,\r\n                department,\r\n                employeeCode,\r\n                role,\r\n                password\r\n            ))\r\n            dispatch(listUsers())\r\n            history.push('/admin/userlist')\r\n        }\r\n        \r\n    }\r\n\r\n  return (\r\n    <>\r\n    \t<Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n            <Col md={4} lg={2} className='d-none d-md-block'>\r\n                <FixedNavbar />\r\n            </Col>\r\n            <Col xs={12} md={8} lg={10}>\r\n                <Header />\r\n                <h1 className='page-header'>Register a New Employee</h1>\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {successRegister && <Message variant='success'>Profile Created</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler} className=\"form-shadow\">\r\n                    <Form.Row>\r\n                        <Form.Group  className=\"col-md-4\" controlId='firstname'>\r\n                            <Form.Label>First Name</Form.Label>\r\n                            <Form.Control \r\n                            type='firstname' \r\n                           \r\n                            placeholder='Enter First name'\r\n                            value={firstname}\r\n                            onChange={(e) => setFirstname(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group  className=\"col-md-4\" controlId='middlename'>\r\n                            <Form.Label>Middle Name</Form.Label>\r\n                            <Form.Control \r\n                            type='middlename' \r\n                            \r\n                            placeholder='Enter Middle name'\r\n                            value={middlename}\r\n                            onChange={(e) => setMiddlename(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group  className=\"col-md-4\" controlId='lastname'>\r\n                            <Form.Label>Last Name</Form.Label>\r\n                            <Form.Control \r\n                            type='lastname' \r\n                            \r\n                            placeholder='Enter Last name'\r\n                            value={lastname}\r\n                            onChange={(e) => setLastname(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group  className=\"col-md-4\" controlId='email'>\r\n                            <Form.Label>Email Address</Form.Label>\r\n                            <Form.Control \r\n                            type='email' \r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                           \r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"col-md-4\" controlId=\"formGridDepartment\">\r\n                            <Form.Label>Department</Form.Label>\r\n                            <Form.Control \r\n                            as=\"select\" \r\n                            size='sm'\r\n                            custom\r\n                            value={department}\r\n                            onChange={(e) => setDepartment(e.target.value)}>\r\n                                <option value=''>Select...</option>\r\n                                <option value='IT'>IT</option>\r\n                                <option value='PROJECT'>PROJECT</option>\r\n                                <option value='HR'>HR</option>\r\n                                <option value='MIS'>MIS</option>\r\n                                <option value='QUALITY-ASSURANCE'>QUALITY-ASSURANCE</option>\r\n                                <option value='TRAINING'>TRAINING</option>\r\n                                <option value='ADMIN'>ADMIN</option>\r\n                                <option value='OUTCESS'>OUTCESS</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group  className=\"col-md-4\" controlId='employeeCode'>\r\n                            <Form.Label>Employee Code</Form.Label>\r\n                            <Form.Control \r\n                            type='employeeCode' \r\n                            placeholder='Enter Employee Code'\r\n                            value={employeeCode}\r\n                            onChange={(e) => setEmployeeCode(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        \r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group className=\"col-md-4\" controlId=\"formGridRole\">\r\n                            <Form.Label>Role</Form.Label>\r\n                            <Form.Control \r\n                            as=\"select\" \r\n                            size='sm'\r\n                            custom\r\n                            value={role}\r\n                            onChange={(e) => setRole(e.target.value)}>\r\n                                <option value=''>Select...</option>\r\n                                <option value='hr'>HR</option>\r\n                                <option value='employee'>EMPLOYEE</option>\r\n                                <option value='supervisor'>SUPERVISOR</option>\r\n                                <option value='admin'>ADMIN</option>\r\n                                <option value='hr-manager'>HR-MANAGER</option>\r\n                                <option value='trainer'>TRAINER</option>\r\n                                <option value='team-lead'>TEAM-LEAD</option>\r\n                                <option value='asst-manager'>ASST-MANAGER</option>\r\n                                <option value='IT-Support'>IT-SUPPORT</option>\r\n                                <option value='agent'>AGENT</option>\r\n                                <option value='manager'>MANAGER</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"col-md-4\" controlId='password'>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control \r\n                            type='password' \r\n                            placeholder='Enter Password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"col-md-4\" controlId='confirrmPassword'>\r\n                            <Form.Label>Confirm Password</Form.Label>\r\n                            <Form.Control \r\n                            type='password' \r\n                            placeholder='Confirm Password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Button type='submit' variant='primary' className='btn-block'>\r\n                      Register\r\n                    </Button>\r\n                </Form>\r\n            </Col>\r\n            \r\n        </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StaffCreateScreen;\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\StaffEditScreen.js",["227"],"import React, { useState, useEffect } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Nav } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport { getUserDetailsById, updateUser } from '../actions/userActions'\r\nimport { USER_DETAILS_ID_RESET, USER_UPDATE_RESET } from '../constants/userConstants'\r\nimport '../styles/FixedNavbar.css';\r\nimport AdminHeader from '../components/AdminHeader';\r\nimport '../styles/ProfileScreen.css';\r\n\r\n\r\nconst StaffEditScreen = ({ history, match }) => {\r\n    const userId = match.params.id\r\n\r\n    const [firstname, setFirstname] = useState('')\r\n    const [middlename, setMiddlename] = useState('')\r\n    const [lastname, setLastname] = useState('')\r\n    const [email, setEmail] = useState('')\r\n   \r\n    \r\n    const [role, setRole] = useState('')    \r\n    const [department, setDepartment] = useState('')    \r\n    const [employeeCode, setEmployeeCode] = useState('')  \r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { success:successUpdate } = userUpdate\r\n\r\n    const userDetailsById = useSelector(state => state.userDetailsById)\r\n    const { error, user } = userDetailsById\r\n\r\n    useEffect(() => {\r\n        if (userInfo  && (userInfo.role === 'hr' || userInfo.role === 'hr-manager' || userInfo.role === 'admin')) {\r\n            \r\n           \r\n            if(successUpdate) {\r\n                dispatch({\r\n                    type: USER_UPDATE_RESET\r\n                })\r\n                dispatch({\r\n                    type: USER_DETAILS_ID_RESET\r\n                })\r\n                history.push('/admin/userlist')\r\n            } else {\r\n            if(!user.employee || user.employee._id !== userId) {\r\n                dispatch(getUserDetailsById(userId))\r\n            } else {\r\n                setFirstname(user.employee.firstname)\r\n                setLastname(user.employee.lastname)\r\n                setMiddlename(user.employee.middlename)\r\n                setEmail(user.employee.email)\r\n                setRole(user.employee.role)\r\n                setDepartment(user.employee.department)\r\n                setEmployeeCode(user.employee.employeeCode)\r\n\r\n            }\r\n        }\r\n        } else {\r\n            history.push('/')\r\n        } \r\n        \r\n    }, [history, userInfo, userId, user, successUpdate, dispatch])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({\r\n            _id: userId,\r\n            firstname,\r\n            middlename,\r\n            lastname,\r\n            email,\r\n           role,\r\n           employeeCode,\r\n           department\r\n        }))\r\n        history.push('/admin/userlist')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {user.employee  && (\r\n            <Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n                <Col md={4} lg={2} className='d-none d-md-block'>\r\n            <div className=\"fixednavbar-wrapper\">\r\n            <div className='employee-details'>\r\n                <p>{userInfo.role}</p>\r\n                <p>{userInfo.email}</p>\r\n            </div>\r\n        <Nav className=\"flex-column\">\r\n        <NavLink to='/admin/userlist' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-home pr-3\"></i>\r\n          All Employees\r\n        </NavLink>\r\n        <NavLink to={`/admin/user/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"far fa-id-card pr-3\"></i>\r\n          Details\r\n        </NavLink>\r\n        <NavLink to={`/admin/profile/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-user-circle pr-3\"></i>\r\n          Profile\r\n        </NavLink>\r\n        <NavLink to={`/admin/education/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-graduation-cap pr-3\"></i>\r\n          Education\r\n        </NavLink>\r\n        <NavLink to={`/admin/nextofkin/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-user-friends pr-3\"></i>\r\n          Employee Next Of Kin\r\n        </NavLink>\r\n        </Nav>\r\n        </div>\r\n            </Col>\r\n           \r\n            <Col xs={12} md={8} lg={10}>\r\n                <AdminHeader\r\n                    userId\r\n                />\r\n                <h1 className='page-header'>Update {user.employee.firstname}'s Record</h1>\r\n               \r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {successUpdate && <Message variant='success'>Profile Created</Message>}\r\n                \r\n                <Form onSubmit={submitHandler} className=\"form-shadow\">\r\n                    <Form.Row>\r\n                        <Form.Group  className=\"col-md-4\" controlId='firstname'>\r\n                            <Form.Label>First Name</Form.Label>\r\n                            <Form.Control \r\n                            type='firstname' \r\n                           \r\n                            placeholder='Enter First name'\r\n                            value={firstname}\r\n                            onChange={(e) => setFirstname(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group  className=\"col-md-4\" controlId='middlename'>\r\n                            <Form.Label>Middle Name</Form.Label>\r\n                            <Form.Control \r\n                            type='middlename' \r\n                            \r\n                            placeholder='Enter Middle name'\r\n                            value={middlename}\r\n                            onChange={(e) => setMiddlename(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group  className=\"col-md-4\" controlId='lastname'>\r\n                            <Form.Label>Last Name</Form.Label>\r\n                            <Form.Control \r\n                            type='lastname' \r\n                            \r\n                            placeholder='Enter Last name'\r\n                            value={lastname}\r\n                            onChange={(e) => setLastname(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group  className=\"col-md-4\" controlId='email'>\r\n                            <Form.Label>Email Address</Form.Label>\r\n                            <Form.Control \r\n                            type='email' \r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                           \r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group className=\"col-md-4\" controlId=\"formGridDepartment\">\r\n                            <Form.Label>Department</Form.Label>\r\n                            <Form.Control \r\n                            as=\"select\" \r\n                            size='sm'\r\n                            value={department}\r\n                            onChange={(e) => setDepartment(e.target.value)}>\r\n                                <option value=''>Select...</option>\r\n                                <option value='IT'>IT</option>\r\n                                <option value='PROJECT'>PROJECT</option>\r\n                                <option value='HR'>HR</option>\r\n                                <option value='MIS'>MIS</option>\r\n                                <option value='QUALITY-ASSURANCE'>QUALITY-ASSURANCE</option>\r\n                                <option value='TRAINING'>TRAINING</option>\r\n                                <option value='ADMIN'>ADMIN</option>\r\n                                <option value='OUTCESS'>OUTCESS</option>\r\n\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group  className=\"col-md-4\" controlId='employeeCode'>\r\n                            <Form.Label>Employee Code</Form.Label>\r\n                            <Form.Control \r\n                            type='employeeCode' \r\n                            placeholder='Enter Employee Code'\r\n                            value={employeeCode}\r\n                            onChange={(e) => setEmployeeCode(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                        \r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"formGridRole\">\r\n                            <Form.Label>Role</Form.Label>\r\n                            <Form.Control \r\n                            as=\"select\" \r\n                            size='sm'\r\n                            value={role}\r\n                            onChange={(e) => setRole(e.target.value)}>\r\n                                <option value=''>Select...</option>\r\n                                <option value='hr'>HR</option>\r\n                                <option value='employee'>EMPLOYEE</option>\r\n                                <option value='supervisor'>SUPERVISOR</option>\r\n                                <option value='admin'>ADMIN</option>\r\n                                <option value='hr-manager'>HR-MANAGER</option>\r\n                                <option value='trainer'>TRAINER</option>\r\n                                <option value='team-lead'>TEAM-LEAD</option>\r\n                                <option value='asst-manager'>ASST-MANAGER</option>\r\n                                <option value='IT-Support'>IT-SUPPORT</option>\r\n                                <option value='agent'>AGENT</option>\r\n                                <option value='manager'>MANAGER</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        \r\n                    </Form.Row>\r\n                    <Button type='submit' variant='primary' className='btn-block'>\r\n                        Update\r\n                    </Button>\r\n                </Form>\r\n            </Col>\r\n                 \r\n        </Row>\r\n        )\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StaffEditScreen;\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\HomeScreen.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\RoleEditScreen.js",["228","229","230"],"import React, { useState, useEffect } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, ListGroup, Nav } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getUserDetailsById, updateUser } from '../actions/userActions'\r\nimport { USER_DETAILS_ID_RESET, USER_UPDATE_RESET } from '../constants/userConstants';\r\nimport '../styles/FixedNavbar.css';\r\nimport AdminHeader2 from '../components/AdminHeader2';\r\nimport '../styles/ProfileScreen.css';\r\n\r\n\r\nconst RoleEditScreen = ({ history, match }) => {\r\n    const userId = match.params.id\r\n\r\n    const [role, setRole] = useState('')\r\n    const [employeeCode, setEmployeeCode] = useState('')\r\n    const [isManager, setIsManager] = useState(false)\r\n    const [isActive, setIsActive] = useState(false)\r\n\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { success:successUpdate } = userUpdate\r\n    \r\n\r\n    const userDetailsById = useSelector(state => state.userDetailsById)\r\n    const { loading, error, user } = userDetailsById\r\n    \r\n    useEffect(() => {\r\n        if (userInfo  && (userInfo.role === 'hr' || userInfo.role === 'hr-manager' || userInfo.role === 'admin')) {\r\n            \r\n           \r\n            if(successUpdate) {\r\n                dispatch({\r\n                    type: USER_UPDATE_RESET\r\n                })\r\n                dispatch({\r\n                    type: USER_DETAILS_ID_RESET\r\n                })\r\n                history.push('/admin/userlist')\r\n            } else {\r\n            if(!user.employee || userId !== user.employee._id) {\r\n                dispatch(getUserDetailsById(userId))\r\n            } else {\r\n                setRole(user.employee.role)\r\n                setIsActive(user.employee.isActive)\r\n                setIsManager(user.employee.isManager)\r\n                setEmployeeCode(user.employee.employeeCode)\r\n            }\r\n        }\r\n        } else {\r\n            history.push('/')\r\n        }\r\n        \r\n        \r\n    }, [history, successUpdate, userInfo, userId, user, dispatch])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({\r\n            _id: userId,\r\n            employeeCode,\r\n            role,\r\n            isActive,\r\n            isManager\r\n        }))\r\n        history.push('/admin/userlist')\r\n        //history.push('/admin/userlist')\r\n    }\r\n    return (\r\n        <>\r\n            {user.employee && (\r\n            <Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n            <Col md={4} lg={2} className='d-none d-md-block'>\r\n            <div className=\"fixednavbar-wrapper\">\r\n      <div className='employee-details'>\r\n        <p>{userInfo.role}</p>\r\n        <p>{userInfo.email}</p>\r\n      </div>\r\n            <Nav className=\"flex-column\">\r\n            <NavLink to='/home' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-home pr-4\"></i>\r\n          Home\r\n        </NavLink>\r\n        <NavLink to='/dashboard' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"far fa-id-card pr-4\"></i>\r\n          Personal details\r\n        </NavLink>\r\n        <NavLink to='/updatepassword' exact className=\"nav-link\" activeClassName='active-here'>\r\n        <i class=\"fas fa-unlock pr-4\"></i>\r\n          Update Password\r\n        </NavLink>\r\n        <NavLink to='/dashboard' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-graduation-cap pr-4\"></i>\r\n          Education\r\n        </NavLink>\r\n        <NavLink to='/myleave' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-sign-out-alt pr-4\"></i>\r\n          My Leave\r\n        </NavLink>\r\n                {\r\n                    (userInfo.role === 'hr') && (\r\n                        <>\r\n                        <div className='admin-section'>\r\n            <p>Admin Section</p>\r\n          </div>\r\n          <NavLink to='/myleave' exact className=\"nav-link\" activeClassName='active-here'>\r\n            <i class=\"fas fa-box-open pr-4\"></i>\r\n            Leave Applications\r\n          </NavLink>\r\n          <NavLink to='/admin/userlist' exact className=\"nav-link\" activeClassName='active-here'>\r\n            <i class=\"fas fa-users pr-4\"></i>\r\n            All Employees\r\n          </NavLink>\r\n          <NavLink to='/admin/register' exact className=\"nav-link\" activeClassName='active-here'>\r\n            <i class=\"fas fa-user-plus pr-4\"></i>\r\n            Register Employee\r\n          </NavLink>\r\n                        </>\r\n                    )\r\n                }\r\n            </Nav>\r\n            </div>\r\n            </Col>\r\n\r\n\r\n            <Col xs={12} md={8} lg={10}>\r\n                <AdminHeader2 />\r\n                <h1 className='page-header'>Update {user.employee.email} Role</h1>\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {successUpdate && <Message variant='success'>Profile Created</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler} className=\"form-shadow\">\r\n                    <Form.Group controlId='isActive'>\r\n                        <Form.Check\r\n                        type='checkbox' \r\n                        label='Is Active'\r\n                        checked={isActive}\r\n                        onChange={(e) => setIsActive(e.target.checked)}\r\n                        ></Form.Check>\r\n                    </Form.Group>\r\n                    <Form.Group controlId='isManager'>\r\n                        <Form.Check\r\n                        type='checkbox' \r\n                        label='Is Manager'\r\n                        checked={isManager}\r\n                        onChange={(e) => setIsManager(e.target.checked)}\r\n                        ></Form.Check>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formGridRole\">\r\n                            <Form.Label>Role</Form.Label>\r\n                            <Form.Control \r\n                            as=\"select\" \r\n                            size='sm'\r\n                            value={role}\r\n                            custom\r\n                            onChange={(e) => setRole(e.target.value)}>\r\n                                <option value=''>Select...</option>\r\n                                <option value='hr'>HR</option>\r\n                                <option value='employee'>EMPLOYEE</option>\r\n                                <option value='supervisor'>SUPERVISOR</option>\r\n                                <option value='admin'>ADMIN</option>\r\n                                <option value='hr-manager'>HR-MANAGER</option>\r\n                                <option value='trainer'>TRAINER</option>\r\n                                <option value='team-lead'>TEAM-LEAD</option>\r\n                                <option value='asst-manager'>ASST-MANAGER</option>\r\n                                <option value='IT-Support'>IT-SUPPORT</option>\r\n                                <option value='agent'>AGENT</option>\r\n                                <option value='manager'>MANAGER</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group controlId='employeeCode'>\r\n                            <Form.Label>Employee Code</Form.Label>\r\n                            <Form.Control \r\n                            type='employeeCode' \r\n                            placeholder='Enter Employee Code'\r\n                            value={employeeCode}\r\n                            onChange={(e) => setEmployeeCode(e.target.value)}\r\n                            ></Form.Control>\r\n                        </Form.Group>\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                    </Button>\r\n                </Form>\r\n            </Col>\r\n            </Row>\r\n            )}\r\n            </>\r\n    )\r\n}\r\n\r\nexport default RoleEditScreen;\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\ProfileScreen.js",["231","232"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Row, Col, ListGroup, Form } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { createProfile, getProfileDetails, updateProfile } from '../actions/profileActions'\r\nimport { PROFILE_CREATE_RESET, PROFILE_DETAILS_RESET, PROFILE_UPDATE_RESET } from '../constants/profileConstants'\r\nimport FixedNavbar from '../components/FixedNavbar';\r\nimport Header from '../components/Header';\r\nimport '../styles/ProfileScreen.css';\r\n\r\nconst ProfileScreen = ({ history }) => {\r\n\tconst [dob, setDob] = useState('')\r\n\tconst [contactNo, setContactNo] = useState('')\r\n\tconst [privateEmail, setPrivateEmail] = useState('')\r\n\tconst [gender, setGender] = useState('')\r\n\tconst [dateOfJoining, setDateOfJoining] = useState('')\r\n\tconst [dateOfLastPromotion, setDateOfLastPromotion] = useState('')\r\n\tconst [address, setAddress] = useState('')\r\n\tconst [stateOfOrigin, setStateOfOrigin] = useState('')\r\n\tconst [lga, setLga] = useState('')\r\n\tconst [maritalStatus, setMaritalStatus] = useState('')\r\n\tconst [religion, setReligion] = useState('')\r\n\r\n\t//const [message, setMessage] = useState(null)\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst userLogin = useSelector(state => state.userLogin)\r\n\tconst { userInfo } = userLogin\r\n\r\n\tconst profileDetails = useSelector(state => state.profileDetails)\r\n\tconst { loading, profile } = profileDetails\r\n\r\n\tconst profileUpdate = useSelector(state => state.profileUpdate)\r\n\tconst {  error:errorUpdate, success:successUpdate } = profileUpdate\r\n\r\n\tconst profileCreate = useSelector(state => state.profileCreate)\r\n\tconst { error:errorCreate, success:successCreate } = profileCreate\r\n\r\n\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\t\tif(!userInfo) {\r\n\t\t\t\t\thistory.push('/')\r\n\t\t\t} else {\r\n\t\t\t\t\tif(successUpdate || successCreate) {\r\n\t\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\t\t\ttype: PROFILE_UPDATE_RESET\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\t\t\ttype: PROFILE_CREATE_RESET\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\t\t\t\ttype: PROFILE_DETAILS_RESET\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\thistory.push('/')\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\tif(!profile || !profile.dob) {\r\n\t\t\t\t\t\t\tdispatch(getProfileDetails('me'))\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tsetDob(profile.dob)\r\n\t\t\t\t\t\t\tsetContactNo(profile.contactNo)\r\n\t\t\t\t\t\t\tsetPrivateEmail(profile.privateEmail)\r\n\t\t\t\t\t\t\tsetGender(profile.gender)\r\n\t\t\t\t\t\t\tsetDateOfJoining(profile.dateOfJoining)\r\n\t\t\t\t\t\t\tsetDateOfLastPromotion(profile.dateOfLastPromotion)\r\n\t\t\t\t\t\t\tsetAddress(profile.address)\r\n\t\t\t\t\t\t\tsetStateOfOrigin(profile.stateOfOrigin)\r\n\t\t\t\t\t\t\tsetLga(profile.lga)\r\n\t\t\t\t\t\t\tsetMaritalStatus(profile.maritalStatus)\r\n\t\t\t\t\t\t\tsetReligion(profile.religion)\r\n\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t}\r\n\t}, [dispatch, history, profile, successUpdate, successCreate, userInfo])\r\n\r\n\tconst submitHandler = (e) => {\r\n\t\t\te.preventDefault()\r\n\t\t\tdispatch(updateProfile({\r\n\t\t\t\t\t_id: profile._id,\r\n\t\t\t\t\tdob,\r\n\t\t\t\t\tcontactNo,\r\n\t\t\t\t\tprivateEmail,\r\n\t\t\t\t\tgender,\r\n\t\t\t\t\tdateOfJoining,\r\n\t\t\t\t\tdateOfLastPromotion,\r\n\t\t\t\t\taddress,\r\n\t\t\t\t\tstateOfOrigin,\r\n\t\t\t\t\tlga,\r\n\t\t\t\t\tmaritalStatus,\r\n\t\t\t\t\treligion\r\n\t\t\t}))\r\n\t\t\t\r\n\t\t\t\r\n\t}\r\n\r\n\r\nconst createsubmitHandler= (e) => {\r\n\t\te.preventDefault()\r\n\t\t//Create Actions\r\n\t\tdispatch(createProfile({\r\n\t\t\t\r\n\t\t\t\tdob,\r\n\t\t\t\tcontactNo,\r\n\t\t\t\tprivateEmail,\r\n\t\t\t\tgender,\r\n\t\t\t\tdateOfJoining,\r\n\t\t\t\tdateOfLastPromotion,\r\n\t\t\t\taddress,\r\n\t\t\t\tstateOfOrigin,\r\n\t\t\t\tlga,\r\n\t\t\t\tmaritalStatus,\r\n\t\t\t\treligion\r\n\t\t\t}))\r\n\t\t\r\n\t}\r\n\r\n\treturn (\r\n\t\t\t<>\r\n\t\t\t\t\r\n\t\t\t<Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n\t\t\t\t<Col md={4} lg={2} className='d-none d-md-block'>\r\n\t\t\t\t\t<FixedNavbar />\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={12} md={8} lg={10}>\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t\t\t<h1 className='page-header'>My Profile</h1>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t{errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\t\t\t\t\t\t\t{errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\t\t\t\t\t\t\t{successUpdate && <Message variant='success'>Profile Updated</Message>}\r\n\t\t\t\t\t\t\t{loading && <Loader />}\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tprofile ? (\r\n\t\t\t\t\t\t\t\t\t\t\t<Form onSubmit={submitHandler} className=\"form-shadow\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='dateOfBirth'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Date Of Birth</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='date'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Date Of Birth'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={dob.substring(0, 10)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setDob(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='contactNo'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Contact Number</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='contactNo'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Contact Number'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={contactNo}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setContactNo(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='privateEmail'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Email Address</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='privateEmail'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Private Email'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={privateEmail}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setPrivateEmail(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t</Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group className=\"col-md-4\" controlId=\"formGridGender\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Gender</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tas=\"select\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcustom \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize='sm'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={gender}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setGender(e.target.value)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=''>Select...</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value='MALE'>MALE</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value='FEMALE'>FEMALE</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='dateOfJoining'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Date Of Joining</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='date' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Date Of Joining'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={dateOfJoining}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setDateOfJoining(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='dateOfLastPromotion'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Date Of Last Promotion</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='date' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Date Of Last Promotion'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={dateOfLastPromotion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setDateOfLastPromotion(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t</Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='address'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Address</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='address' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Address'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={address}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setAddress(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='stateOfOrigin'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>State Of Origin</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='stateOfOrigin' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter State Of Origin'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={stateOfOrigin}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setStateOfOrigin(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='lga'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>LGA</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='lga' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter LGA'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={lga}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setLga(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t</Form.Row>\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-6\" controlId='maritalStatus'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Marital Status</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='maritalStatus' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Marital Status'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={maritalStatus}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setMaritalStatus(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-6\" controlId='religion'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Religion</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='religion' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Religion'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={religion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setReligion(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t</Form.Row>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t<Button type='submit' variant='primary' className='btn-block'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tUpdate\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t<Form onSubmit={createsubmitHandler} className=\"form-shadow\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='dateOfBirth'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Date Of Birth</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='date' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Date Of Birth'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={dob}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setDob(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='contactNo'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Contact Number</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='contactNo' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Contact Number'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={contactNo}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setContactNo(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='privateEmail'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Email Address</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='privateEmail' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Private Email'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={privateEmail}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setPrivateEmail(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group className=\"col-md-4\" controlId=\"formGridGender\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Gender</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tas=\"select\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsize='sm'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={gender}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setGender(e.target.value)}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value=''>Select...</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value='MALE'>MALE</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<option value='FEMALE'>FEMALE</option>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='dateOfJoining'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Date Of Joining</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='date' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Date Of Joining'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={dateOfJoining}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setDateOfJoining(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='dateOfLastPromotion'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Date Of Last Promotion</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='date' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Date Of Last Promotion'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={dateOfLastPromotion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setDateOfLastPromotion(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='address'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Address</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='address' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Address'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={address}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setAddress(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='stateOfOrigin'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>State Of Origin</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='stateOfOrigin' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter State Of Origin'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={stateOfOrigin}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setStateOfOrigin(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-4\" controlId='lga'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>LGA</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='lga' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter LGA'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={lga}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setLga(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-6\" controlId='maritalStatus'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Marital Status</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='maritalStatus' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Marital Status'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={maritalStatus}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setMaritalStatus(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Group  className=\"col-md-6\" controlId='religion'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Label>Religion</Form.Label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='religion' \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tplaceholder='Enter Religion'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={religion}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setReligion(e.target.value)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Form.Row>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Button type='submit' variant='primary' className='btn-block'>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tCreate\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t</Col>\r\n\t\t\t</Row>\r\n\t\t\t</>\r\n\t)\r\n}\r\n\r\nexport default ProfileScreen;\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\NextOfKinScreen.js",["233","234"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Row, Col, ListGroup, Form } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { createNextOfKin, getNextOfKinDetails, updateNextOfKin } from '../actions/nextOfKinActions'\r\nimport { NOK_CREATE_RESET, NOK_DETAILS_RESET, NOK_UPDATE_RESET } from '../constants/nextOfKinConstants'\r\nimport FixedNavbar from '../components/FixedNavbar';\r\nimport '../styles/ProfileScreen.css';\r\nimport Header from '../components/Header';\r\n\r\nconst NextOfKinScreen = ({ history }) => {\r\n    const [firstname, setFirstname] = useState('')\r\n    const [lastname, setLastname] = useState('')\r\n    const [contact, setContact] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [relationship, setRelationship] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const nextOfKinDetails = useSelector(state => state.nextOfKinDetails)\r\n    const { loading, nextOfKin } = nextOfKinDetails\r\n\r\n    const nextOfKinUpdate = useSelector(state => state.nextOfKinUpdate)\r\n    const { error:errorUpdate, success:successUpdate } = nextOfKinUpdate\r\n\r\n    const nextOfKinCreate = useSelector(state => state.nextOfKinCreate)\r\n    const { error:errorCreate, success:successCreate } = nextOfKinCreate\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n\r\n        if(!userInfo) {\r\n            history.push('/')\r\n        } else {\r\n            if(successUpdate || successCreate) {\r\n                dispatch({\r\n                    type: NOK_UPDATE_RESET\r\n                })\r\n                dispatch({\r\n                    type: NOK_DETAILS_RESET\r\n                })\r\n                dispatch({\r\n                    type: NOK_CREATE_RESET\r\n                })\r\n                history.push('/home')\r\n            } else {\r\n            if(!nextOfKin || !nextOfKin.firstname) {\r\n                dispatch(getNextOfKinDetails('me'))\r\n            } else {\r\n                setFirstname(nextOfKin.firstname)\r\n                setLastname(nextOfKin.lastname)\r\n                setContact(nextOfKin.contact)\r\n                setEmail(nextOfKin.email)\r\n                setRelationship(nextOfKin.relationship)\r\n\r\n            }\r\n        }\r\n    }\r\n    }, [dispatch, history, nextOfKin, successUpdate, successCreate, userInfo])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateNextOfKin({\r\n            _id: nextOfKin._id,\r\n            firstname,\r\n            lastname,\r\n            contact,\r\n            email,\r\n            relationship\r\n        }))\r\n       \r\n       \r\n        \r\n    }\r\n\r\n    const createsubmitHandler= (e) => {\r\n        e.preventDefault()\r\n        dispatch(createNextOfKin({\r\n           \r\n            firstname,\r\n            lastname,\r\n            contact,\r\n            email,\r\n            relationship\r\n        }))\r\n      \r\n    }\r\n\r\n    return (\r\n        <>\r\n         \r\n        <Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n            <Col md={4} lg={2} className='d-none d-md-block'>\r\n                <FixedNavbar />\r\n            </Col>\r\n            <Col xs={12} md={8} lg={10}>\r\n            <Header />\r\n                <h1 className='page-header'>Next Of Kin</h1>\r\n               \r\n                {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n                {successUpdate && <Message variant='success'>Profile Updated</Message>}\r\n                {loading && <Loader />}\r\n                {\r\n                    nextOfKin ? (\r\n                        <Form onSubmit={submitHandler} className=\"form-shadow\">\r\n                        <Form.Row>\r\n                            <Form.Group  className=\"col-md-4\" controlId='firstname'>\r\n                                <Form.Label>Firstname</Form.Label>\r\n                                <Form.Control \r\n                                type='firstname' \r\n                            \r\n                                placeholder='Enter Firstname'\r\n                                value={firstname}\r\n                                onChange={(e) => setFirstname(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='lastname'>\r\n                                <Form.Label>Lastname</Form.Label>\r\n                                <Form.Control \r\n                                type='lastname' \r\n                                \r\n                                placeholder='Enter Lastname'\r\n                                value={lastname}\r\n                                onChange={(e) => setLastname(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control \r\n                                type='email' \r\n                                \r\n                                placeholder='Enter  Email'\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            \r\n                            <Form.Group  className=\"col-md-6\" controlId='contact'>\r\n                                <Form.Label>Contact Number</Form.Label>\r\n                                <Form.Control \r\n                                type='contact' \r\n                                placeholder='Enter Contact'\r\n                                value={contact}\r\n                                onChange={(e) => setContact(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-6\" controlId='relationship'>\r\n                                <Form.Label>Relationship</Form.Label>\r\n                                <Form.Control \r\n                                type='relationship' \r\n                                placeholder='Enter Relationship'\r\n                                value={relationship}\r\n                                onChange={(e) => setRelationship(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                        \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        \r\n                    \r\n                        <Button type='submit' variant='primary' className='btn-block'>\r\n                            Update\r\n                        </Button>\r\n                    </Form>\r\n                    ) : (\r\n                        <Form onSubmit={createsubmitHandler} className=\"form-shadow\">\r\n                        <Form.Row>\r\n                            <Form.Group  className=\"col-md-4\" controlId='firstname'>\r\n                                <Form.Label>Firstname</Form.Label>\r\n                                <Form.Control \r\n                                type='firstname' \r\n                            \r\n                                placeholder='Enter Firstname'\r\n                                value={firstname}\r\n                                onChange={(e) => setFirstname(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='lastname'>\r\n                                <Form.Label>Lastname</Form.Label>\r\n                                <Form.Control \r\n                                type='lastname' \r\n                                \r\n                                placeholder='Enter Lastname'\r\n                                value={lastname}\r\n                                onChange={(e) => setLastname(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control \r\n                                type='email' \r\n                                \r\n                                placeholder='Enter  Email'\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            \r\n                            <Form.Group  className=\"col-md-6\" controlId='contact'>\r\n                                <Form.Label>Contact Number</Form.Label>\r\n                                <Form.Control \r\n                                type='contact' \r\n                                placeholder='Enter Contact'\r\n                                value={contact}\r\n                                onChange={(e) => setContact(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-6\" controlId='relationship'>\r\n                                <Form.Label>Relationship</Form.Label>\r\n                                <Form.Control \r\n                                type='relationship' \r\n                                placeholder='Enter Relationship'\r\n                                value={relationship}\r\n                                onChange={(e) => setRelationship(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                        \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        \r\n                    \r\n                        <Button type='submit' variant='primary' className='btn-block'>\r\n                            Create\r\n                        </Button>\r\n                    </Form>\r\n                    )\r\n                }\r\n                \r\n            </Col>\r\n        </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NextOfKinScreen\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\EducationScreen.js",["235","236"],"import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button, Row, Col, ListGroup, Form } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { EDUCATION_CREATE_RESET, EDUCATION_DETAILS_RESET, EDUCATION_UPDATE_RESET } from '../constants/educationConstants'\r\nimport { createEducation, getEducationDetails, updateEducation } from '../actions/educationActions';\r\nimport FixedNavbar from '../components/FixedNavbar';\r\nimport Header from '../components/Header';\r\n\r\nconst EducationScreen = ({ history }) => {\r\n    const [institutionAttended, setInstitutionAttended] = useState('')\r\n    const [courseOfStudy, setCourseOfStudy] = useState('')\r\n    const [yearOfGraduation, setYearOfGraduation] = useState('')\r\n    const [professionalMembership, setProfessionalMembership] = useState('')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const educationDetails = useSelector(state => state.educationDetails)\r\n    const { loading, education } = educationDetails\r\n\r\n    const educationUpdate = useSelector(state => state.educationUpdate)\r\n    const {  error:errorUpdate, success:successUpdate } = educationUpdate\r\n\r\n    const educationCreate = useSelector(state => state.educationCreate)\r\n    const { error:errorCreate, success:successCreate } = educationCreate\r\n    \r\n  \r\n\r\n    useEffect(() => {\r\n\r\n        if(!userInfo) {\r\n            history.push('/')\r\n        } else {\r\n            if(successUpdate || successCreate) {\r\n                dispatch({\r\n                    type: EDUCATION_UPDATE_RESET\r\n                })\r\n                dispatch({\r\n                    type: EDUCATION_DETAILS_RESET\r\n                })\r\n                dispatch({\r\n                    type: EDUCATION_CREATE_RESET\r\n                })\r\n                history.push('/home')\r\n            } else {\r\n            if(!education || !education.institutionAttended) {\r\n                dispatch(getEducationDetails('me'))\r\n            } else {\r\n                setInstitutionAttended(education.institutionAttended)\r\n                setCourseOfStudy(education.courseOfStudy)\r\n                setProfessionalMembership(education.professionalMembership)\r\n                setYearOfGraduation(moment(education.yearOfGraduation).format(\"YYYY-MM-DD\"))\r\n            }\r\n        }\r\n    }\r\n    }, [dispatch, history, education, successCreate, successUpdate, userInfo])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateEducation({\r\n            _id: education._id,\r\n            institutionAttended,\r\n            courseOfStudy,\r\n            professionalMembership,\r\n            yearOfGraduation\r\n        }))\r\n       \r\n    }\r\n\r\n    const createsubmitHandler= (e) => {\r\n        e.preventDefault()\r\n        dispatch(createEducation({\r\n           institutionAttended,\r\n           courseOfStudy,\r\n           professionalMembership,\r\n           yearOfGraduation\r\n        }))\r\n       \r\n    }\r\n\r\n  return (\r\n    <>   \r\n      <Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n      <Col md={4} lg={2} className='d-none d-md-block'>\r\n        <FixedNavbar />\r\n      </Col>\r\n      <Col xs={12} md={8} lg={10}>\r\n          <Header />\r\n          <h1 className='page-header'>Education</h1>\r\n          {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n          {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n          {successUpdate && <Message variant='success'>Profile Updated</Message>}\r\n          {loading && <Loader />}\r\n          {\r\n            education ? (\r\n              <Form onSubmit={submitHandler} className=\"form-shadow\">\r\n                <Form.Row>\r\n                  <Form.Group className=\"col-md-6\" controlId='institutionAttended'>\r\n                    <Form.Label>Institution Attended</Form.Label>\r\n                    <Form.Control \r\n                    \ttype='institutionAttended'\r\n                    \tplaceholder='Enter Institution Attended'\r\n                    \tvalue={institutionAttended}\r\n                    \tonChange={(e) => setInstitutionAttended(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group  className=\"col-md-6\" controlId='courseOfStudy'>\r\n                    <Form.Label>Course Of Study</Form.Label>\r\n                    <Form.Control \r\n                      type='courseOfStudy'    \r\n                      placeholder='Enter Course Of Study'\r\n                      value={courseOfStudy}\r\n                      onChange={(e) => setCourseOfStudy(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group  className=\"col-md-6\" controlId='professionalMembership'>\r\n                    <Form.Label>Professional Membership</Form.Label>\r\n                    <Form.Control \r\n                      type='professionalMembership' \r\n                                \r\n                      placeholder='Enter Professional Membership'\r\n                      value={professionalMembership}\r\n                      onChange={(e) => setProfessionalMembership(e.target.value)}\r\n                    ></Form.Control>\r\n                \t</Form.Group>\r\n                \t<Form.Group  className=\"col-md-6\" controlId='yearOfGraduation'>\r\n                    <Form.Label>Year Of Graduation</Form.Label>\r\n                    <Form.Control \r\n                      type='date' \r\n                            \r\n                      placeholder='Enter Year Of Graduation'\r\n                      value={yearOfGraduation}\r\n                      onChange={(e) => setYearOfGraduation(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n                  <Button type='submit' variant='primary' className='btn-block'>\r\n                    Update\r\n                  </Button>\r\n              </Form>\r\n\r\n              ) : (\r\n              <Form onSubmit={createsubmitHandler} className=\"form-shadow\">\r\n                <Form.Row>\r\n                  <Form.Group  className=\"col-md-6\" controlId='institutionAttended'>\r\n                    <Form.Label>Institution Attended</Form.Label>\r\n                    <Form.Control \r\n                      type='institutionAttended' \r\n                            \r\n                      placeholder='Enter Institution Attended'\r\n                      value={institutionAttended}\r\n                      onChange={(e) => setInstitutionAttended(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group  className=\"col-md-6\" controlId='courseOfStudy'>\r\n                  \t<Form.Label>Course Of Study</Form.Label>\r\n                    <Form.Control \r\n                      type='courseOfStudy' \r\n                                \r\n                      placeholder='Enter Course Of Study'\r\n                      value={courseOfStudy}\r\n                      onChange={(e) => setCourseOfStudy(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n\r\n                <Form.Row>\r\n                  <Form.Group  className=\"col-md-6\" controlId='professionalMembership'>\r\n                    <Form.Label>Professional Membership</Form.Label>\r\n                    <Form.Control \r\n                      type='professionalMembership' \r\n                                \r\n                      placeholder='Enter Professional Membership'\r\n                      value={professionalMembership}\r\n                      onChange={(e) => setProfessionalMembership(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                  <Form.Group  className=\"col-md-6\" controlId='yearOfGraduation'>\r\n                    <Form.Label>Year Of Graduation</Form.Label>\r\n                    <Form.Control \r\n                      type='date' \r\n                            \r\n                      placeholder='Enter Year Of Graduation'\r\n                      value={yearOfGraduation}\r\n                      onChange={(e) => setYearOfGraduation(e.target.value)}\r\n                    ></Form.Control>\r\n                  </Form.Group>\r\n                </Form.Row>\r\n                <Button type='submit' variant='primary' className='btn-block'>\r\n                  Create\r\n                </Button>\r\n              </Form>\r\n              )\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default EducationScreen;\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\HrHomeScreen.js",["237","238"],"import React, { useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Table, Button, Row, Col, ListGroup } from 'react-bootstrap'\r\nimport { getUserDetailsById } from '../actions/userActions';\r\nimport FixedNavbar from '../components/FixedNavbar';\r\n\r\n\r\nconst HrHomeScreen = ({ history, match }) => {\r\n    const userId = match.params.id\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n    const userDetailsById = useSelector(state => state.userDetailsById)\r\n    const { user } = userDetailsById\r\n\r\n    useEffect(() => {\r\n        if (!userInfo  && (userInfo.role !== 'hr')) {\r\n            \r\n            history.push('/')\r\n        } else {\r\n            dispatch(getUserDetailsById(userId))\r\n        }\r\n        \r\n        \r\n    }, [history, userInfo, userId, dispatch])\r\n\r\n    return (\r\n        <>\r\n            \r\n        <Row className='ml-4 mr-4 py-4'>\r\n        <Col md={3}>\r\n            <FixedNavbar />\r\n        </Col>\r\n        <Col md={8}>\r\n        <Table striped bordered hover reesponsive className='table-sm mr-4 ml-3'>\r\n            <thead>\r\n                <tr>\r\n                    <th>EMPLOYEE ID</th>\r\n                    <th>FIRST NAME</th>\r\n                    <th>MIDDLE NAME</th>\r\n                    <th>LAST NAME</th>\r\n                    <th>EMAIL</th>\r\n                    <th>ROLE</th>\r\n                    <th>DEPARTMENT</th>\r\n                    <th>ACTION</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                \r\n                <tr key={user.employee._id}>\r\n                    <td>{user.employee.employeeCode}</td>\r\n                    <td>{user.employee.firstname}</td>\r\n                    <td>{user.employee.middlename}</td>\r\n                    <td>{user.employee.lastname}</td>\r\n                    <td><a href={`mailto:${user.employee.email}`}>{user.employee.email}</a></td>\r\n                    <td>{user.employee.role}</td>\r\n                    <td>{user.employee.department}</td>\r\n                    {userInfo && (\r\n                    <td>\r\n                        <LinkContainer to={`/dashboard`}>\r\n                            <Button variant='light' className='btn-sm'>\r\n                                <i className='fas fa-edit'></i>\r\n                            </Button>\r\n                        </LinkContainer>\r\n                        \r\n                    </td>\r\n                    )}\r\n                </tr>\r\n                \r\n            </tbody>\r\n        </Table>\r\n        </Col>\r\n        </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HrHomeScreen\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\AdminProfileScreen.js",["239","240","241","242"],"import React, { useState, useEffect } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { Button, Row, Col, ListGroup, Form, Nav} from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { createProfileEmpId, getProfileDetailsEmpId, updateProfile } from '../actions/profileActions'\r\nimport { PROFILE_CREATE_EMPLOYEE_RESET, PROFILE_DETAILS_EMPLOYEE_RESET, PROFILE_UPDATE_RESET } from '../constants/profileConstants'\r\nimport '../styles/FixedNavbar.css';\r\nimport AdminHeader from '../components/AdminHeader';\r\nimport '../styles/ProfileScreen.css';\r\n\r\nconst AdminProfileScreen = ({ history, match }) => {\r\n    const userId = match.params.id\r\n\r\n\r\n    const [dob, setDob] = useState('')\r\n    const [contactNo, setContactNo] = useState('')\r\n    const [privateEmail, setPrivateEmail] = useState('')\r\n    const [gender, setGender] = useState('')\r\n    const [dateOfJoining, setDateOfJoining] = useState('')\r\n    const [dateOfLastPromotion, setDateOfLastPromotion] = useState('')\r\n    const [address, setAddress] = useState('')\r\n    const [stateOfOrigin, setStateOfOrigin] = useState('')\r\n    const [lga, setLga] = useState('')\r\n    const [maritalStatus, setMaritalStatus] = useState('')\r\n    const [religion, setReligion] = useState('')\r\n\r\n   \r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const profileDetailsEmpId = useSelector(state => state.profileDetailsEmpId)\r\n    const { loading, profile } = profileDetailsEmpId\r\n\r\n    const profileUpdate = useSelector(state => state.profileUpdate)\r\n    const { error:errorUpdate, success:successUpdate } = profileUpdate\r\n\r\n    const profileCreateEmpId = useSelector(state => state.profileCreateEmpId)\r\n    const { error:errorCreate, success:successCreate } = profileCreateEmpId\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n\r\n        if(userInfo  && (userInfo.role === 'hr' || userInfo.role === 'hr-manager' || userInfo.role === 'admin')) {\r\n            \r\n            if(successUpdate || successCreate) {\r\n                dispatch({\r\n                    type: PROFILE_UPDATE_RESET\r\n                })\r\n                dispatch({\r\n                    type: PROFILE_DETAILS_EMPLOYEE_RESET\r\n                })\r\n                dispatch({\r\n                    type: PROFILE_CREATE_EMPLOYEE_RESET\r\n                })\r\n                history.push('/admin/userlist')\r\n            } else {\r\n            if(!profile || profile.employee !== userId) {\r\n                dispatch(getProfileDetailsEmpId(userId))\r\n            } else {\r\n                setDob(profile.dob)\r\n                setContactNo(profile.contactNo)\r\n                setPrivateEmail(profile.privateEmail)\r\n                setGender(profile.gender)\r\n                setDateOfJoining(profile.dateOfJoining)\r\n                setDateOfLastPromotion(profile.dateOfLastPromotion)\r\n                setAddress(profile.address)\r\n                setStateOfOrigin(profile.stateOfOrigin)\r\n                setLga(profile.lga)\r\n                setMaritalStatus(profile.maritalStatus)\r\n                setReligion(profile.religion)\r\n\r\n            }\r\n        }\r\n        } else {\r\n            history.push('/') \r\n    }\r\n    }, [dispatch, history, profile, userId, successUpdate, successCreate, userInfo])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateProfile({\r\n            _id: profile._id,\r\n            dob,\r\n            contactNo,\r\n            privateEmail,\r\n            gender,\r\n            dateOfJoining,\r\n            dateOfLastPromotion,\r\n            address,\r\n            stateOfOrigin,\r\n            lga,\r\n            maritalStatus,\r\n            religion\r\n        }))\r\n       \r\n       \r\n        \r\n    }\r\n\r\n    const createsubmitHandler= (e) => {\r\n        e.preventDefault()\r\n        dispatch(createProfileEmpId({\r\n            employee: userId,\r\n            dob,\r\n            contactNo,\r\n            privateEmail,\r\n            gender,\r\n            dateOfJoining,\r\n            dateOfLastPromotion,\r\n            address,\r\n            stateOfOrigin,\r\n            lga,\r\n            maritalStatus,\r\n            religion\r\n        }))\r\n       \r\n    }\r\n\r\n    return (\r\n        <>\r\n         \r\n        <Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n            <Col md={4} lg={2} className='d-none d-md-block'>   \r\n\r\n        <div className=\"fixednavbar-wrapper\">\r\n            <div className='employee-details'>\r\n                <p>{userInfo.role}</p>\r\n                <p>{userInfo.email}</p>\r\n            </div>\r\n        <Nav className=\"flex-column\">\r\n        <NavLink to='/admin/userlist' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-home pr-3\"></i>\r\n          All Employees\r\n        </NavLink>\r\n        <NavLink to={`/admin/user/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"far fa-id-card pr-3\"></i>\r\n          Details\r\n        </NavLink>\r\n        <NavLink to={`/admin/profile/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-user-circle pr-3\"></i>\r\n          Profile\r\n        </NavLink>\r\n        <NavLink to={`/admin/education/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-user-friends pr-3\"></i>\r\n          Education\r\n        </NavLink>\r\n        <NavLink to={`/admin/nextofkin/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-graduation-cap pr-3\"></i>\r\n          Employee Next Of Kin\r\n        </NavLink>\r\n        </Nav>\r\n        </div>\r\n        </Col>\r\n\r\n        <Col xs={12} md={8} lg={10}>\r\n                <AdminHeader\r\n                    userId\r\n                />\r\n                <h1 className='page-header'>My Profile</h1>\r\n               \r\n               \r\n                {successUpdate && <Message variant='success'>Profile Updated</Message>}\r\n                {loading && <Loader />}\r\n                {\r\n                    profile ? (\r\n                        <Form onSubmit={submitHandler} className=\"form-shadow\">\r\n                        <Form.Row>\r\n                            <Form.Group  className=\"col-md-4\" controlId='dateOfBirth'>\r\n                                <Form.Label>Date Of Birth</Form.Label>\r\n                                <Form.Control \r\n                                type='date' \r\n                            \r\n                                placeholder='Enter Date Of Birth'\r\n                                value={dob}\r\n                                onChange={(e) => setDob(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='contactNo'>\r\n                                <Form.Label>Contact Number</Form.Label>\r\n                                <Form.Control \r\n                                type='contactNo' \r\n                                \r\n                                placeholder='Enter Contact Number'\r\n                                value={contactNo}\r\n                                onChange={(e) => setContactNo(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='privateEmail'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control \r\n                                type='privateEmail' \r\n                                \r\n                                placeholder='Enter Private Email'\r\n                                value={privateEmail}\r\n                                onChange={(e) => setPrivateEmail(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group className=\"col-md-4\" controlId=\"formGridGender\">\r\n                                <Form.Label>Gender</Form.Label>\r\n                                <Form.Control \r\n                                as=\"select\" \r\n                                size='sm'\r\n                                value={gender}\r\n                                onChange={(e) => setGender(e.target.value)}>\r\n                                    <option value=''>Select...</option>\r\n                                    <option value='MALE'>MALE</option>\r\n                                    <option value='FEMALE'>FEMALE</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='dateOfJoining'>\r\n                                <Form.Label>Date Of Joining</Form.Label>\r\n                                <Form.Control \r\n                                type='date' \r\n                                placeholder='Enter Date Of Joining'\r\n                                value={dateOfJoining}\r\n                                onChange={(e) => setDateOfJoining(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='dateOfLastPromotion'>\r\n                                <Form.Label>Date Of Last Promotion</Form.Label>\r\n                                <Form.Control \r\n                                type='date' \r\n                                placeholder='Enter Date Of Last Promotion'\r\n                                value={dateOfLastPromotion}\r\n                                onChange={(e) => setDateOfLastPromotion(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                        \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            \r\n                            <Form.Group  className=\"col-md-4\" controlId='address'>\r\n                                <Form.Label>Address</Form.Label>\r\n                                <Form.Control \r\n                                type='address' \r\n                                placeholder='Enter Address'\r\n                                value={address}\r\n                                onChange={(e) => setAddress(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='stateOfOrigin'>\r\n                                <Form.Label>State Of Origin</Form.Label>\r\n                                <Form.Control \r\n                                type='stateOfOrigin' \r\n                                placeholder='Enter State Of Origin'\r\n                                value={stateOfOrigin}\r\n                                onChange={(e) => setStateOfOrigin(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='lga'>\r\n                                <Form.Label>LGA</Form.Label>\r\n                                <Form.Control \r\n                                type='lga' \r\n                                placeholder='Enter LGA'\r\n                                value={lga}\r\n                                onChange={(e) => setLga(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                        \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            \r\n                            <Form.Group  className=\"col-md-6\" controlId='maritalStatus'>\r\n                                <Form.Label>Marital Status</Form.Label>\r\n                                <Form.Control \r\n                                type='maritalStatus' \r\n                                placeholder='Enter Marital Status'\r\n                                value={maritalStatus}\r\n                                onChange={(e) => setMaritalStatus(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-6\" controlId='religion'>\r\n                                <Form.Label>Religion</Form.Label>\r\n                                <Form.Control \r\n                                type='religion' \r\n                                placeholder='Enter Religion'\r\n                                value={religion}\r\n                                onChange={(e) => setReligion(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                        \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                    \r\n                        <Button type='submit' variant='primary' className='btn-block'>\r\n                            Update\r\n                        </Button>\r\n                    </Form>\r\n                    ) : (\r\n                        <Form onSubmit={createsubmitHandler} className=\"form-shadow\">\r\n                            <Form.Row>\r\n                                <Form.Group  className=\"col-md-4\" controlId='dateOfBirth'>\r\n                                    <Form.Label>Date Of Birth</Form.Label>\r\n                                    <Form.Control \r\n                                    type='date' \r\n                                \r\n                                    placeholder='Enter Date Of Birth'\r\n                                    value={dob}\r\n                                    onChange={(e) => setDob(e.target.value)}\r\n                                    ></Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group  className=\"col-md-4\" controlId='contactNo'>\r\n                                    <Form.Label>Contact Number</Form.Label>\r\n                                    <Form.Control \r\n                                    type='contactNo' \r\n                                    \r\n                                    placeholder='Enter Contact Number'\r\n                                    value={contactNo}\r\n                                    onChange={(e) => setContactNo(e.target.value)}\r\n                                    ></Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group  className=\"col-md-4\" controlId='privateEmail'>\r\n                                    <Form.Label>Email Address</Form.Label>\r\n                                    <Form.Control \r\n                                    type='privateEmail' \r\n                                    \r\n                                    placeholder='Enter Private Email'\r\n                                    value={privateEmail}\r\n                                    onChange={(e) => setPrivateEmail(e.target.value)}\r\n                                    ></Form.Control>\r\n                                </Form.Group>\r\n                                \r\n                        \r\n                                \r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group className=\"col-md-4\" controlId=\"formGridGender\">\r\n                                    <Form.Label>Gender</Form.Label>\r\n                                    <Form.Control \r\n                                    as=\"select\" \r\n                                    size='sm'\r\n                                    value={gender}\r\n                                    onChange={(e) => setGender(e.target.value)}>\r\n                                        <option value=''>Select...</option>\r\n                                        <option value='MALE'>MALE</option>\r\n                                        <option value='FEMALE'>FEMALE</option>\r\n                                    </Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group  className=\"col-md-4\" controlId='dateOfJoining'>\r\n                                    <Form.Label>Date Of Joining</Form.Label>\r\n                                    <Form.Control \r\n                                    type='date' \r\n                                    placeholder='Enter Date Of Joining'\r\n                                    value={dateOfJoining}\r\n                                    onChange={(e) => setDateOfJoining(e.target.value)}\r\n                                    ></Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group  className=\"col-md-4\" controlId='dateOfLastPromotion'>\r\n                                    <Form.Label>Date Of Last Promotion</Form.Label>\r\n                                    <Form.Control \r\n                                    type='date' \r\n                                    placeholder='Enter Date Of Last Promotion'\r\n                                    value={dateOfLastPromotion}\r\n                                    onChange={(e) => setDateOfLastPromotion(e.target.value)}\r\n                                    ></Form.Control>\r\n                                </Form.Group>\r\n                            \r\n                        \r\n                                \r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                \r\n                                <Form.Group  className=\"col-md-4\" controlId='address'>\r\n                                    <Form.Label>Address</Form.Label>\r\n                                    <Form.Control \r\n                                    type='address' \r\n                                    placeholder='Enter Address'\r\n                                    value={address}\r\n                                    onChange={(e) => setAddress(e.target.value)}\r\n                                    ></Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group  className=\"col-md-4\" controlId='stateOfOrigin'>\r\n                                    <Form.Label>State Of Origin</Form.Label>\r\n                                    <Form.Control \r\n                                    type='stateOfOrigin' \r\n                                    placeholder='Enter State Of Origin'\r\n                                    value={stateOfOrigin}\r\n                                    onChange={(e) => setStateOfOrigin(e.target.value)}\r\n                                    ></Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group  className=\"col-md-4\" controlId='lga'>\r\n                                    <Form.Label>LGA</Form.Label>\r\n                                    <Form.Control \r\n                                    type='lga' \r\n                                    placeholder='Enter LGA'\r\n                                    value={lga}\r\n                                    onChange={(e) => setLga(e.target.value)}\r\n                                    ></Form.Control>\r\n                                </Form.Group>\r\n                            \r\n                        \r\n                                \r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                \r\n                                <Form.Group  className=\"col-md-6\" controlId='maritalStatus'>\r\n                                    <Form.Label>Marital Status</Form.Label>\r\n                                    <Form.Control \r\n                                    type='maritalStatus' \r\n                                    placeholder='Enter Marital Status'\r\n                                    value={maritalStatus}\r\n                                    onChange={(e) => setMaritalStatus(e.target.value)}\r\n                                    ></Form.Control>\r\n                                </Form.Group>\r\n                                <Form.Group  className=\"col-md-6\" controlId='religion'>\r\n                                    <Form.Label>Religion</Form.Label>\r\n                                    <Form.Control \r\n                                    type='religion' \r\n                                    placeholder='Enter Religion'\r\n                                    value={religion}\r\n                                    onChange={(e) => setReligion(e.target.value)}\r\n                                    ></Form.Control>\r\n                                </Form.Group>\r\n                            \r\n                        \r\n                                \r\n                            </Form.Row>\r\n                        \r\n                            <Button type='submit' variant='primary' className='btn-block'>\r\n                                Create\r\n                            </Button>\r\n                        </Form>\r\n                    )\r\n                }\r\n                \r\n            </Col>\r\n        </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminProfileScreen;\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\AdminNextOfKinScreen.js",["243","244","245","246"],"import React, { useState, useEffect } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { Button, Row, Col, Nav, Form } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { createNextOfKin, createNextOfKinEmpId, getNextOfKinDetailsEmpId, updateNextOfKin } from '../actions/nextOfKinActions'\r\nimport { NOK_CREATE_EMPLOYEE_RESET, NOK_DETAILS_EMPLOYEE_RESET, NOK_UPDATE_RESET } from '../constants/nextOfKinConstants'\r\nimport '../styles/FixedNavbar.css';\r\nimport AdminHeader from '../components/AdminHeader';\r\nimport '../styles/ProfileScreen.css';\r\n\r\nconst AdminNextOfKinScreen = ({ history, match }) => {\r\n    const userId = match.params.id\r\n    \r\n    const [firstname, setFirstname] = useState('')\r\n    const [lastname, setLastname] = useState('')\r\n    const [contact, setContact] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [relationship, setRelationship] = useState('')\r\n    \r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const nextOfKinDetailsEmpId = useSelector(state => state.nextOfKinDetailsEmpId)\r\n    const { loading, nextOfKin } = nextOfKinDetailsEmpId\r\n\r\n    const nextOfKinUpdate = useSelector(state => state.nextOfKinUpdate)\r\n    const { error:errorUpdate, success:successUpdate } = nextOfKinUpdate\r\n\r\n    const nextOfKinCreateEmpId = useSelector(state => state.nextOfKinCreateEmpId)\r\n    const { error:errorCreate, success:successCreate } = nextOfKinCreateEmpId\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n\r\n        if(userInfo  && (userInfo.role === 'hr' || userInfo.role === 'hr-manager' || userInfo.role === 'admin')) {\r\n            \r\n            if(successUpdate || successCreate) {\r\n                dispatch({\r\n                    type: NOK_UPDATE_RESET\r\n                })\r\n                dispatch({\r\n                    type: NOK_DETAILS_EMPLOYEE_RESET\r\n                })\r\n                dispatch({\r\n                    type: NOK_CREATE_EMPLOYEE_RESET\r\n                })\r\n                history.push('/home')\r\n            } else {\r\n            if(!nextOfKin || nextOfKin.employee  !== userId ) {\r\n                dispatch(getNextOfKinDetailsEmpId(userId))\r\n            } else {\r\n                setFirstname(nextOfKin.firstname)\r\n                setLastname(nextOfKin.lastname)\r\n                setContact(nextOfKin.contact)\r\n                setEmail(nextOfKin.email)\r\n                setRelationship(nextOfKin.relationship)\r\n\r\n            }\r\n        }\r\n        } else {\r\n            history.push('/')\r\n    }\r\n    }, [dispatch, history, nextOfKin, successUpdate, userId, successCreate, userInfo])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateNextOfKin({\r\n            _id: nextOfKin._id,\r\n            firstname,\r\n            lastname,\r\n            contact,\r\n            email,\r\n            relationship\r\n        }))\r\n       \r\n       \r\n        \r\n    }\r\n\r\n    const createsubmitHandler= (e) => {\r\n        e.preventDefault()\r\n        dispatch(createNextOfKinEmpId({\r\n            employee: userId,\r\n            firstname,\r\n            lastname,\r\n            contact,\r\n            email,\r\n            relationship\r\n        }))\r\n       \r\n       \r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n         \r\n        <Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n        <Col md={4} lg={2} className='d-none d-md-block'>\r\n        <div className=\"fixednavbar-wrapper\">\r\n            <div className='employee-details'>\r\n                <p>{userInfo.role}</p>\r\n                <p>{userInfo.email}</p>\r\n            </div>\r\n        <Nav className=\"flex-column\">\r\n        <NavLink to='/admin/userlist' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-home pr-3\"></i>\r\n          All Employees\r\n        </NavLink>\r\n        <NavLink to={`/admin/user/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"far fa-id-card pr-3\"></i>\r\n          Details\r\n        </NavLink>\r\n        <NavLink to={`/admin/profile/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-user-circle pr-3\"></i>\r\n          Profile\r\n        </NavLink>\r\n        <NavLink to={`/admin/education/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-user-friends pr-3\"></i>\r\n          Education\r\n        </NavLink>\r\n        <NavLink to={`/admin/nextofkin/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-graduation-cap pr-3\"></i>\r\n          Employee Next Of Kin\r\n        </NavLink>\r\n        </Nav>\r\n        </div>\r\n        </Col>\r\n\r\n            <Col xs={12} md={8} lg={10}>\r\n                <AdminHeader\r\n                    userId\r\n                />\r\n                <h1 className='page-header'>Next Of Kin</h1>\r\n               \r\n                \r\n                {successUpdate && <Message variant='success'>Profile Updated</Message>}\r\n                {loading && <Loader />}\r\n                {\r\n                    nextOfKin ? (\r\n                        <Form onSubmit={submitHandler} className=\"form-shadow\">\r\n                        <Form.Row>\r\n                            <Form.Group  className=\"col-md-4\" controlId='firstname'>\r\n                                <Form.Label>Firstname</Form.Label>\r\n                                <Form.Control \r\n                                type='firstname' \r\n                            \r\n                                placeholder='Enter Firstname'\r\n                                value={firstname}\r\n                                onChange={(e) => setFirstname(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='lastname'>\r\n                                <Form.Label>Lastname</Form.Label>\r\n                                <Form.Control \r\n                                type='lastname' \r\n                                \r\n                                placeholder='Enter Lastname'\r\n                                value={lastname}\r\n                                onChange={(e) => setLastname(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control \r\n                                type='email' \r\n                                \r\n                                placeholder='Enter  Email'\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            \r\n                            <Form.Group  className=\"col-md-6\" controlId='contact'>\r\n                                <Form.Label>Contact Number</Form.Label>\r\n                                <Form.Control \r\n                                type='contact' \r\n                                placeholder='Enter Contact'\r\n                                value={contact}\r\n                                onChange={(e) => setContact(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-6\" controlId='relationship'>\r\n                                <Form.Label>Relationship</Form.Label>\r\n                                <Form.Control \r\n                                type='relationship' \r\n                                placeholder='Enter Relationship'\r\n                                value={relationship}\r\n                                onChange={(e) => setRelationship(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                        \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        \r\n                    \r\n                        <Button type='submit' variant='primary' className='btn-block'>\r\n                            Update\r\n                        </Button>\r\n                    </Form>\r\n                    ) : (\r\n                        <Form onSubmit={createsubmitHandler} className=\"form-shadow\">\r\n                        <Form.Row>\r\n                            <Form.Group  className=\"col-md-4\" controlId='firstname'>\r\n                                <Form.Label>Firstname</Form.Label>\r\n                                <Form.Control \r\n                                type='firstname' \r\n                            \r\n                                placeholder='Enter Firstname'\r\n                                value={firstname}\r\n                                onChange={(e) => setFirstname(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='lastname'>\r\n                                <Form.Label>Lastname</Form.Label>\r\n                                <Form.Control \r\n                                type='lastname' \r\n                                \r\n                                placeholder='Enter Lastname'\r\n                                value={lastname}\r\n                                onChange={(e) => setLastname(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-4\" controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control \r\n                                type='email' \r\n                                \r\n                                placeholder='Enter  Email'\r\n                                value={email}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            \r\n                            <Form.Group  className=\"col-md-6\" controlId='contact'>\r\n                                <Form.Label>Contact Number</Form.Label>\r\n                                <Form.Control \r\n                                type='contact' \r\n                                placeholder='Enter Contact'\r\n                                value={contact}\r\n                                onChange={(e) => setContact(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-6\" controlId='relationship'>\r\n                                <Form.Label>Relationship</Form.Label>\r\n                                <Form.Control \r\n                                type='relationship' \r\n                                placeholder='Enter Relationship'\r\n                                value={relationship}\r\n                                onChange={(e) => setRelationship(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                        \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        \r\n                    \r\n                        <Button type='submit' variant='primary' className='btn-block'>\r\n                            Create\r\n                        </Button>\r\n                    </Form>\r\n                    )\r\n                }\r\n                \r\n            </Col>\r\n        </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminNextOfKinScreen;\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\AdminEducationScreen.js",["247","248","249","250","251","252","253"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Table, Button, Row, Col, Nav, Form } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { EDUCATION_CREATE_EMPLOYEE_RESET, EDUCATION_CREATE_RESET, EDUCATION_DETAILS_EMPLOYEE_RESET, EDUCATION_UPDATE_RESET } from '../constants/educationConstants'\r\nimport { createEducation, createEducationEmpId, getEducationDetailsEmpId, updateEducation } from '../actions/educationActions'\r\nimport '../styles/FixedNavbar.css';\r\nimport AdminHeader from '../components/AdminHeader';\r\nimport '../styles/ProfileScreen.css';\r\n\r\nconst AdminEducationScreen = ({ history, match }) => {\r\n    const userId = match.params.id\r\n\r\n    const [institutionAttended, setInstitutionAttended] = useState('')\r\n    const [courseOfStudy, setCourseOfStudy] = useState('')\r\n    const [yearOfGraduation, setYearOfGraduation] = useState('')\r\n    const [professionalMembership, setProfessionalMembership] = useState('')\r\n\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const educationDetailsEmpId = useSelector(state => state.educationDetailsEmpId)\r\n    const { loading, error, education } = educationDetailsEmpId\r\n\r\n    const educationUpdate = useSelector(state => state.educationUpdate)\r\n    const { success:successUpdate } = educationUpdate\r\n\r\n    const educationCreateEmpId = useSelector(state => state.educationCreateEmpId)\r\n    const { success:successCreate } = educationCreateEmpId\r\n    \r\n  \r\n\r\n    useEffect(() => {\r\n\r\n        if(userInfo  && (userInfo.role === 'hr' || userInfo.role === 'hr-manager' || userInfo.role === 'admin')) {\r\n            \r\n            if(successUpdate || successCreate) {\r\n                dispatch({\r\n                    type: EDUCATION_UPDATE_RESET\r\n                })\r\n                dispatch({\r\n                    type: EDUCATION_DETAILS_EMPLOYEE_RESET\r\n                })\r\n                dispatch({\r\n                    type: EDUCATION_CREATE_EMPLOYEE_RESET\r\n                })\r\n                history.push('/home')\r\n            } else {\r\n            if(!education || education.employee  !== userId) {\r\n                dispatch(getEducationDetailsEmpId(userId))\r\n            } else {\r\n                setInstitutionAttended(education.institutionAttended)\r\n                setCourseOfStudy(education.courseOfStudy)\r\n                setProfessionalMembership(education.professionalMembership)\r\n                setYearOfGraduation(education.yearOfGraduation)\r\n            }\r\n        }\r\n        } else {\r\n            history.push('/')\r\n    }\r\n    }, [dispatch, history, education, userId, successCreate, successUpdate, userInfo])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateEducation({\r\n            _id: education._id,\r\n            institutionAttended,\r\n            courseOfStudy,\r\n            professionalMembership,\r\n            yearOfGraduation\r\n        }))\r\n       \r\n    }\r\n\r\n    const createsubmitHandler= (e) => {\r\n        e.preventDefault()\r\n        dispatch(createEducationEmpId({\r\n            employee: userId,\r\n           institutionAttended,\r\n           courseOfStudy,\r\n           professionalMembership,\r\n           yearOfGraduation\r\n        }))\r\n       \r\n    }\r\n\r\n    return (\r\n        <>\r\n         \r\n        <Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n        <Col md={4} lg={2} className='d-none d-md-block'>\r\n        <div className=\"fixednavbar-wrapper\">\r\n            <div className='employee-details'>\r\n                <p>{userInfo.role}</p>\r\n                <p>{userInfo.email}</p>\r\n            </div>\r\n        <Nav className=\"flex-column\">\r\n        <NavLink to='/admin/userlist' exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-home pr-3\"></i>\r\n          All Employees\r\n        </NavLink>\r\n        <NavLink to={`/admin/user/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"far fa-id-card pr-3\"></i>\r\n          Details\r\n        </NavLink>\r\n        <NavLink to={`/admin/profile/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-user-circle pr-3\"></i>\r\n          Profile\r\n        </NavLink>\r\n        <NavLink to={`/admin/education/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-user-friends pr-3\"></i>\r\n          Education\r\n        </NavLink>\r\n        <NavLink to={`/admin/nextofkin/${userId}/edit`} exact className=\"nav-link\" activeClassName='active-here'>\r\n          <i class=\"fas fa-graduation-cap pr-3\"></i>\r\n          Employee Next Of Kin\r\n        </NavLink>\r\n        </Nav>\r\n        </div>\r\n        </Col>\r\n\r\n        <Col xs={12} md={8} lg={10}>\r\n                <AdminHeader\r\n                    userId\r\n                />\r\n                <h1 className='page-header'>Education</h1>\r\n               \r\n               \r\n                {successUpdate && <Message variant='success'>Profile Updated</Message>}\r\n                {loading && <Loader />}\r\n                {\r\n                    education ? (\r\n                        <Form onSubmit={submitHandler} className=\"form-shadow\">\r\n                        <Form.Row>\r\n                            <Form.Group  className=\"col-md-6\" controlId='institutionAttended'>\r\n                                <Form.Label>Institution Attended</Form.Label>\r\n                                <Form.Control \r\n                                type='institutionAttended' \r\n                            \r\n                                placeholder='Enter Institution Attended'\r\n                                value={institutionAttended}\r\n                                onChange={(e) => setInstitutionAttended(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-6\" controlId='courseOfStudy'>\r\n                                <Form.Label>Course Of Study</Form.Label>\r\n                                <Form.Control \r\n                                type='courseOfStudy' \r\n                                \r\n                                placeholder='Enter Course Of Study'\r\n                                value={courseOfStudy}\r\n                                onChange={(e) => setCourseOfStudy(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            \r\n                            \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group  className=\"col-md-6\" controlId='professionalMembership'>\r\n                                <Form.Label>Professional Membership</Form.Label>\r\n                                <Form.Control \r\n                                type='professionalMembership' \r\n                                \r\n                                placeholder='Enter Professional Membership'\r\n                                value={professionalMembership}\r\n                                onChange={(e) => setProfessionalMembership(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-6\" controlId='yearOfGraduation'>\r\n                                <Form.Label>Year Of Graduation</Form.Label>\r\n                                <Form.Control \r\n                                type='date' \r\n                            \r\n                                placeholder='Enter Year Of Graduation'\r\n                                value={yearOfGraduation}\r\n                                onChange={(e) => setYearOfGraduation(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        \r\n                    \r\n                        <Button type='submit' variant='primary' className='btn-block'>\r\n                            Update\r\n                        </Button>\r\n                    </Form>\r\n                    ) : (\r\n                        <Form onSubmit={createsubmitHandler} className=\"form-shadow\">\r\n                        <Form.Row>\r\n                            <Form.Group  className=\"col-md-6\" controlId='institutionAttended'>\r\n                                <Form.Label>Institution Attended</Form.Label>\r\n                                <Form.Control \r\n                                type='institutionAttended' \r\n                            \r\n                                placeholder='Enter Institution ATtended'\r\n                                value={institutionAttended}\r\n                                onChange={(e) => setInstitutionAttended(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-6\" controlId='courseOfStudy'>\r\n                                <Form.Label>Course Of Study</Form.Label>\r\n                                <Form.Control \r\n                                type='courseOfStudy' \r\n                                \r\n                                placeholder='Enter Course Of Study'\r\n                                value={courseOfStudy}\r\n                                onChange={(e) => setCourseOfStudy(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            \r\n                            \r\n                    \r\n                            \r\n                        </Form.Row>\r\n                        <Form.Row>\r\n                            <Form.Group  className=\"col-md-6\" controlId='professionalMembership'>\r\n                                <Form.Label>Professional Membership</Form.Label>\r\n                                <Form.Control \r\n                                type='professionalMembership' \r\n                                \r\n                                placeholder='Enter Professional Membership'\r\n                                value={professionalMembership}\r\n                                onChange={(e) => setProfessionalMembership(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group  className=\"col-md-6\" controlId='yearOfGraduation'>\r\n                                <Form.Label>Year Of Graduation</Form.Label>\r\n                                <Form.Control \r\n                                type='date' \r\n                            \r\n                                placeholder='Enter Year Of Graduation'\r\n                                value={yearOfGraduation}\r\n                                onChange={(e) => setYearOfGraduation(e.target.value)}\r\n                                ></Form.Control>\r\n                            </Form.Group>\r\n                        </Form.Row>\r\n                        \r\n                        \r\n                    \r\n                        <Button type='submit' variant='primary' className='btn-block'>\r\n                            Create\r\n                        </Button>\r\n                    </Form>\r\n                    )\r\n                }\r\n                \r\n            </Col>\r\n        </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AdminEducationScreen;\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\MyLeaveApplicationScreen.js",["254","255","256","257","258","259","260","261","262","263","264","265"],"import React, { useState, useEffect } from 'react';\r\nimport { Container, Table, Button, Modal, Form, Row, Col } from 'react-bootstrap';\r\nimport moment from 'moment';\r\nimport Message from '../components/Message';\r\nimport Loader from '../components/Loader';\r\nimport { LEAVE_APPLICATION_CREATE_RESET, LEAVE_APPLICATION_DETAILS_RESET, LEAVE_APPLICATION_UPDATE_EMPLOYEE_RESET } from '../constants/leaveApplicationConstants'\r\nimport { createLeaveApplication, getMyLeaveApplication, updateEmployeeLeaveApplicationId } from '../actions/leaveApplication';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Paginate from '../components/Paginate';\r\nimport FixedNavbar from '../components/FixedNavbar';\r\nimport Header from '../components/Header';\r\n\r\nconst MyLeaveApplicationScreen = ({ history, match }) => {\r\n\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  \r\n  const [leaveType, setLeaveType] = useState('')\r\n  const [fromDate, setLeaveStartDate] = useState('')\r\n  const [toDate, setLeaveEndDate] = useState('')\r\n  const [reasonForLeave, setLeaveDescription] = useState('')\r\n  const [leaveStatus, setLeaveStatus] = useState('')\r\n\r\n  const pageNumber = match.params.pageNumber || 1\r\n  const employees = 'myleave'\r\n    \r\n  const dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector(state => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const leaveAppDetails = useSelector(state => state.leaveAppDetails)\r\n  const { loading, data, pages, page } = leaveAppDetails\r\n\r\n  const updateLeaveApp = useSelector(state => state.updateLeaveApp)\r\n  const {  error:errorUpdate, success:successUpdate } = updateLeaveApp\r\n\r\n  const createLeaveApp = useSelector(state => state.createLeaveApp)\r\n  const { error:errorCreate, success:successCreate } = createLeaveApp\r\n\r\n\r\n    useEffect(() => {\r\n\r\n      if(!userInfo) {\r\n          history.push('/')\r\n      } else {\r\n        dispatch(getMyLeaveApplication(pageNumber))\r\n          // if(!leaveapplication) {\r\n          //     dispatch(getMyLeaveApplication())\r\n          //     console.log(leaveapplication)\r\n          //     if(successUpdate || successCreate) {\r\n          //       dispatch({\r\n          //           type: LEAVE_APPLICATION_UPDATE_EMPLOYEE_RESET\r\n          //       })\r\n          //       dispatch({\r\n          //           type: LEAVE_APPLICATION_DETAILS_RESET\r\n          //       })\r\n          //       dispatch({\r\n          //           type:LEAVE_APPLICATION_CREATE_RESET\r\n          //       })\r\n          //       // history.push('/home')\r\n          //   } \r\n  \r\n          // } else {\r\n          //     setLeaveType(leaveapplication.leaveType)\r\n          //     setLeaveStartDate(leaveapplication.fromDate)\r\n          //     setLeaveEndDate(leaveapplication.toDate)\r\n          //     setLeaveDescription(leaveapplication.reasonForLeave)\r\n          //     setLeaveStatus(leaveapplication.status)\r\n\r\n          // }\r\n    }\r\n  }, [dispatch, history, data, successCreate, successUpdate, userInfo, pageNumber])\r\n\r\n\r\n\r\n\r\n  const createsubmitHandler= (e) => {\r\n    e.preventDefault(e)\r\n    dispatch(createLeaveApplication(\r\n        leaveType,\r\n        fromDate,\r\n        toDate,\r\n        reasonForLeave,\r\n        leaveStatus\r\n      ))\r\n    console.log(`type: ${leaveType}, from: ${fromDate}, to: ${toDate}, reason: ${reasonForLeave}`)\r\n  }\r\n\r\n  return (\r\n    <>     \r\n    \t<Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n        <Col md={4} lg={2} className='d-none d-md-block'>\r\n\t\t\t\t\t<FixedNavbar />\r\n\t\t\t\t</Col>\r\n\t\t\t\t<Col xs={12} md={8} lg={10}>\r\n          <Header />\r\n\t\t\t\t\t{/* <h1 className='page-header'>My Leave</h1> */}\r\n          <div className='allLeave-title'>\r\n\t\t\t\t\t  <h1>My Leave</h1>\r\n\t\t\t\t\t  <Button onClick={handleShow} className='applyleave-btn'>\r\n              Apply Leave\r\n            </Button>\r\n          </div>\r\n\t\t\t\t\t<div className='myleave-wrapper'>\r\n      <>\r\n\r\n      <Modal\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n        className=\"myleave-modal\"\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Apply for Leave</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form onSubmit={createsubmitHandler}>\r\n            \r\n            <Form.Group controlId=\"leaveType\">\r\n                <Form.Label>Leave Type</Form.Label>\r\n                <Form.Control \r\n                  as=\"select\"\r\n                  custom \r\n                  size='sm'\r\n                  value={leaveType}\r\n                  onChange={(e) => setLeaveType(e.target.value)}>\r\n                    <option value=''>Select Leave Type</option>\r\n                    <option value='Sick-Leave'>Sick Leave</option>\r\n                    <option value='Paid-Leave'>Paid Leave</option>\r\n                    <option value='Maternity-Leave'>Maternity Leave</option>\r\n                    <option value='Work-Trip'>Work Trip</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n            <Form.Row>\r\n            <Form.Group as={Col} controlId='startDate'>\r\n              <Form.Label>Start Date</Form.Label>\r\n              <Form.Control type='date' placeholder='Start Date'  value={fromDate}\r\n                onChange={(e) => setLeaveStartDate(e.target.value)}></Form.Control>\r\n            </Form.Group>\r\n            <Form.Group as={Col} controlId='endDate'>\r\n              <Form.Label>End Date</Form.Label>\r\n              <Form.Control type='date' placeholder='End Date'  value={toDate}\r\n                onChange={(e) => setLeaveEndDate(e.target.value)}></Form.Control>\r\n            </Form.Group>\r\n            </Form.Row>\r\n            <Form.Group controlId='description'>\r\n              <Form.Label>Detailed Reason For Leave Application</Form.Label>\r\n              <Form.Control \r\n                as=\"textarea\" \r\n                rows={3} \r\n                style={{ backgroundColor: 'var(--input-field-color)' }}\r\n                value={reasonForLeave}\r\n                onChange={(e) => setLeaveDescription(e.target.value)}/>\r\n            </Form.Group>\r\n            <Form.Group controlId='status'>\r\n              <Form.Label>Status</Form.Label>\r\n              <Form.Control placeholder=\"Pending\" disabled />\r\n            </Form.Group>\r\n            <hr />\r\n            <Button className='applyleave-btn mb-2 mr-3' type='submit' onClick={handleClose}>\r\n              Apply\r\n            </Button>\r\n            <Button className='mb-2' variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n        {/* <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button className='applyleave-btn' type='submit' onClick={handleClose}>\r\n            Submit\r\n          </Button>\r\n        </Modal.Footer> */}\r\n      </Modal>\r\n    </>\r\n\r\n      <Table striped bordered hover size=\"sm\" className='myleave-table'>\r\n        <thead>\r\n          <tr>\r\n            <th>Leave Type</th>\r\n            <th>Start Date</th>\r\n            <th>End Date</th>\r\n            <th>Detailed Reason</th>\r\n            <th>Status</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map(user => (\r\n            <tr key={user._id}>\r\n              <td>{user.leaveType}</td>\r\n              <td>{moment(user.fromDate).format(\"DD-MM-YYYY\")}</td>\r\n              <td>{moment(user.toDate).format(\"DD-MM-YYYY\")}</td>\r\n              <td>{user.reasonForLeave}</td>\r\n              <td>{user.leaveStatus}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n      <Paginate\r\n        destination={employees}\r\n        pages={pages} \r\n        page={page} />\t\t\t\r\n    \t\t</div>\r\n      \t</Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MyLeaveApplicationScreen;","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\ForgotPasswordScreen.js",["266","267","268","269","270"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { ScaleLoader } from 'react-spinners'\r\nimport Message from '../components/Message'\r\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\r\nimport LoginImg from '../img/call-center.jpg';\r\nimport Logo from '../img/outcess-logo.png';\r\nimport '../styles/LoginScreen.css';\r\nimport { css } from '@emotion/css'\r\nimport { forgotPassword } from '../actions/userActions'\r\nimport { USER_FORGOT_PASSWORD_RESET } from '../constants/userConstants'\r\n\r\n//Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\nconst ForgotPasswordScreen = ({ history }) => {\r\n    const [email, setEmail] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userForgotPassword = useSelector(state => state.userForgotPassword)\r\n    const { loading, error, success, user } = userForgotPassword\r\n\r\n    useEffect(() => {\r\n        \r\n        if(success) {\r\n            // dispatch({\r\n            //     type: USER_FORGOT_PASSWORD_RESET\r\n            // })\r\n            //history.push('/')\r\n            //history.push(`/resetpassword/${user.resetToken}`)\r\n            setMessage(`If an account exists for ${email} you will recieve password reset instructions`)\r\n        }\r\n        \r\n    }, [success])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        //dispatch \r\n        dispatch(forgotPassword(email))\r\n        //history.push('/')\r\n        //setMessage(`If an account exists for ${email} you will recieve password reset instructions`)\r\n    }\r\n\r\n    return (\r\n        <div className=\"loginpage-wrapper\">\r\n            <Container className='loginpage-container'>\r\n                <Row>\r\n                <Col className='d-none d-lg-block col-xs-none col-lg-6'>\r\n                    <div className='login-img'>\r\n                    <img src={LoginImg}/>\r\n                    </div>\r\n                </Col>\r\n                <Col className='loginform-col col-xs-12 col-lg-6'>\r\n                    <div className='logo'>\r\n                    <img src={Logo}/>\r\n                    </div>\r\n                    {error && <Message variant='danger'>{error}</Message>}\r\n                    {success ? <Message variant='success'>{message}</Message> : <div></div>}\r\n                    <Form onSubmit={submitHandler}>\r\n                    <Form.Group className='form-group email' controlId=\"formBasicEmail\">\r\n                        <i class=\"fas fa-user pr-3\"></i>\r\n                        <Form.Label className='login-label'></Form.Label>\r\n                        {/* <Form.Control \r\n                            autoFocus \r\n                            type=\"email\" \r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            placeholder=\"Enter email\" /> */}\r\n\r\n            \r\n                    <div className=\"form\">\r\n                        <input \r\n                        type=\"email\"\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        className=\"form__input\" \r\n                        autocomplete=\"false\" \r\n                        placeholder=\" \"/>\r\n                    <label for=\"email\" class=\"form__label\">Email address</label>\r\n                    </div>\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary' className='btn btn-block'>\r\n                        Submit\r\n                    </Button>\r\n                    <Link to='/' className='forget-password'>\r\n                        <p>Sign-In</p>\r\n                    </Link>\r\n                    </Form>\r\n                    <div className=\"loading\">\r\n                  \r\n                    {loading &&\r\n                        <ScaleLoader\r\n                        css={override}\r\n                        sizeUnit={\"px\"}\r\n                        size={150}\r\n                        color={\"#123abc\"}\r\n                        loading={loading}\r\n                        />\r\n                    }\r\n                    </div>\r\n                </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ForgotPasswordScreen\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\ResetPasswordScreen.js",["271","272"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { ScaleLoader } from 'react-spinners'\r\nimport Message from '../components/Message'\r\nimport { Container, Row, Col, Form, Button } from 'react-bootstrap';\r\nimport LoginImg from '../img/call-center.jpg';\r\nimport Logo from '../img/outcess-logo.png';\r\nimport '../styles/LoginScreen.css';\r\nimport { css } from '@emotion/css'\r\nimport { resetPassword } from '../actions/userActions'\r\n\r\n//Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\nconst ResetPasswordScreen = ({ history, match }) => {\r\n    const token = match.params.id  \r\n\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState(null)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userResetPassword = useSelector(state => state.userResetPassword)\r\n    const { loading, error, userInfo } = userResetPassword\r\n\r\n    useEffect(() => {\r\n        if(userInfo) {\r\n            history.push('/home')\r\n        } \r\n    }, [history, userInfo])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        //Dispatch will go here\r\n        if(password !== confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(resetPassword(\r\n                password,\r\n                token\r\n            ))\r\n            //history.push('/')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"loginpage-wrapper\">\r\n            <Container className='loginpage-container'>\r\n                <Row>\r\n                <Col className='d-none d-lg-block col-xs-none col-lg-6'>\r\n                    <div className='login-img'>\r\n                    <img src={LoginImg}/>\r\n                    </div>\r\n                </Col>\r\n                <Col className='loginform-col col-xs-12 col-lg-6'>\r\n                    <div className='logo'>\r\n                    <img src={Logo}/>\r\n                    </div>\r\n                    {error && <Message variant='danger'>{error}</Message>}\r\n                    {message && <Message variant='danger'>{message}</Message>}\r\n                    <Form onSubmit={submitHandler}>\r\n                    <Form.Group className='form-group password' controlId=\"formBasicPassword\">\r\n                        <i class=\"fas fa-unlock pr-3\"></i>\r\n                        <Form.Label className='login-label'>New Password</Form.Label>\r\n                        <Form.Control \r\n                            type=\"password\" \r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                            placeholder=\"Password\" />\r\n                    </Form.Group>\r\n                    <Form.Group className='form-group password' controlId=\"formBasicPassword\">\r\n                        <i class=\"fas fa-unlock pr-3\"></i>\r\n                        <Form.Label className='login-label'>Confirm Password</Form.Label>\r\n                        <Form.Control \r\n                            type=\"password\" \r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                            placeholder=\"Password\" />\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary' className='btn btn-block'>\r\n                        Reset Password\r\n                    </Button>\r\n                    <Link to='/' className='forget-password'>\r\n                        <p>Sign-In</p>\r\n                    </Link>\r\n                    </Form>\r\n                    <div className=\"loading\">\r\n                  \r\n                    {loading &&\r\n                        <ScaleLoader\r\n                        css={override}\r\n                        sizeUnit={\"px\"}\r\n                        size={150}\r\n                        color={\"#123abc\"}\r\n                        loading={loading}\r\n                        />\r\n                    }\r\n                    </div>\r\n                </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResetPasswordScreen\r\n","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\AllLeaveApplications.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\screens\\UpdateMyLeave.js",["273","274","275","276"],"import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { getAllEmployeeLeaveApplications, getAllEmployeeLeaveApplicationById, updateEmployeeLeaveApplicationId } from '../actions/leaveApplication';\r\nimport { LEAVE_APPLICATION_CREATE_RESET, LEAVE_APPLICATION_UPDATE_EMPLOYEE_RESET, LEAVE_APPLICATION_DETAILS_RESET, LEAVE_APPLICATION_DETAILS_ID_RESET } from '../constants/leaveApplicationConstants';\r\nimport FixedNavbar from '../components/FixedNavbar';\r\nimport Header from '../components/Header';\r\n\r\nconst UpdateMyLeave = ({ history, match }) => {\r\n  const leaveApplicationId = match.params.id\r\n\r\n\tconst [leaveType, setLeaveType] = useState('')\r\n  const [fromDate, setLeaveStartDate] = useState('')\r\n  const [toDate, setLeaveEndDate] = useState('')\r\n  const [reasonForLeave, setLeaveDescription] = useState('')\r\n  const [leaveStatus, setLeaveStatus] = useState('')\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n  const userLogin = useSelector(state => state.userLogin)\r\n  const { userInfo } = userLogin\r\n\r\n  const leaveApplicationDetailsById = useSelector(state => state.leaveApplicationDetailsById)\r\n    const { error, leaveapplication } = leaveApplicationDetailsById\r\n\r\n  const updateLeaveApp = useSelector(state => state.updateLeaveApp)\r\n  const { success:successUpdate } = updateLeaveApp\r\n\r\n\r\n  useEffect(() => {\r\n    if (userInfo  && (userInfo.role === 'hr' || userInfo.role === 'hr-manager' || userInfo.role === 'admin')) {\r\n       if(successUpdate) {\r\n          dispatch({\r\n              type: LEAVE_APPLICATION_UPDATE_EMPLOYEE_RESET\r\n          })\r\n          dispatch({\r\n              type: LEAVE_APPLICATION_DETAILS_ID_RESET\r\n          })\r\n          history.push('/leaveapplications')\r\n      } else {\r\n      if(!leaveapplication || !leaveapplication.leaveType || leaveapplication._id !== leaveApplicationId) {\r\n        dispatch(\r\n        getAllEmployeeLeaveApplicationById(leaveApplicationId)\r\n      )\r\n       } else {\r\n        setLeaveType(leaveapplication.leaveType)\r\n        setLeaveStartDate(moment(leaveapplication.fromDate).format(\"DD-MM-YYYY\"))\r\n        setLeaveEndDate(moment(leaveapplication.toDate).format(\"DD-MM-YYYY\"))\r\n        setLeaveDescription(leaveapplication.reasonForLeave)\r\n        setLeaveStatus(leaveapplication.leaveStatus)\r\n     \r\n      }\r\n    }\r\n    } else {\r\n      history.push('/')\r\n    }\r\n   \r\n    \r\n   \r\n      \r\n  }, [history, userInfo, leaveApplicationId, leaveapplication, successUpdate, dispatch])\r\n\r\n\r\n  // useEffect(() => {\r\n\r\n  //   if(!userInfo) {\r\n  //     history.push('/')\r\n  //   } else {\r\n  //     if(successUpdate) {\r\n  //         dispatch({\r\n  //             type: LEAVE_APPLICATION_UPDATE_EMPLOYEE_RESET\r\n  //         })\r\n  //         dispatch({\r\n  //             type: LEAVE_APPLICATION_DETAILS_RESET\r\n  //         })\r\n  //         history.push('/')\r\n  //     } else {\r\n  //       if(!myLeave || !myLeave.leaveStatus) {\r\n  //         dispatch(getAllEmployeeLeaveApplicationById(keyword, pageNumber))\r\n  //       } else {\r\n  //         setLeaveStatus(myLeave.leaveStatus)\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }, [dispatch, history, data, userInfo, keyword, pageNumber])\r\n\r\n\t\r\n\tconst updateMyLeaveHandler = (e) => {\r\n    e.preventDefault(e)\r\n\t\tdispatch(updateEmployeeLeaveApplicationId({\r\n      _id: leaveApplicationId,\r\n\t\t\tleaveType,\r\n      fromDate,\r\n      toDate,\r\n      reasonForLeave,\r\n      leaveStatus\r\n    }))\r\n    history.push('/leaveapplications')\r\n    console.log(`Leave Status: ${leaveStatus}, id: ${leaveApplicationId}`)\r\n  }\r\n\r\n\r\n  return (\r\n    <>     \r\n    \t<Row className='ml-4 mr-4 py-4 profilescreen-wrapper'>\r\n\t\t\t\t<Col md={4} lg={2} className='d-none d-md-block'>\r\n          <FixedNavbar />\r\n        </Col>\r\n        <Col xs={12} md={8} lg={10}>\r\n          <Header />\r\n\t\t\t  <h1 className='page-header'>Change Leave Status</h1>\r\n        <Form onSubmit={updateMyLeaveHandler} className='form-shadow'>\r\n            \r\n            <Form.Group controlId=\"leaveType\">\r\n                <Form.Label>Leave Type</Form.Label>\r\n                <Form.Control \r\n\t\t\t\t\t\t\t\t\t// placeholder={leaveType}\r\n                  value={leaveType}\r\n                  onChange={(e) => setLeaveType(e.target.value)}\r\n                  disabled >\r\n                </Form.Control>\r\n            </Form.Group>\r\n\t\t\t\t\t\t<Form.Row>\r\n\t\t\t\t\t\t\t<Form.Group as={Col} controlId='startDate'>\r\n\t\t\t\t\t\t\t\t<Form.Label>Start Date</Form.Label>\r\n\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t// placeholder={fromDate}\r\n                  value={fromDate}\r\n                  onChange={(e) => setLeaveStartDate(e.target.value)}\r\n\t\t\t\t\t\t\t\t\tdisabled>\r\n\t\t\t\t\t\t\t\t</Form.Control>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t\t<Form.Group as={Col} controlId='endDate'>\r\n\t\t\t\t\t\t\t\t<Form.Label>End Date</Form.Label>\r\n\t\t\t\t\t\t\t\t<Form.Control \r\n\t\t\t\t\t\t\t\t\t// placeholder={user.toDate}\r\n                  value={toDate}\r\n                  onChange={(e) => setLeaveEndDate(e.target.value)}\r\n\t\t\t\t\t\t\t\t\tdisabled\r\n\t\t\t\t\t\t\t\t></Form.Control>\r\n\t\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t\t</Form.Row>\r\n            <Form.Group controlId='description'>\r\n              <Form.Label>Detailed Reason For Leave Application</Form.Label>\r\n              <Form.Control \r\n                as=\"textarea\" \r\n                rows={2} \r\n                // style={{ backgroundColor: 'var(--input-field-color)' }}\r\n                // placeholder={user.reasonForLeave}\r\n                value={reasonForLeave}\r\n                onChange={(e) => setLeaveDescription(e.target.value)}\r\n                disabled\r\n\t\t\t\t\t\t\t/>\r\n            </Form.Group>\r\n            <Form.Group controlId='status'>\r\n              <Form.Label>Status</Form.Label>\r\n              <Form.Control \r\n                  as=\"select\"\r\n                  custom \r\n                  size='sm'\r\n                  value={leaveStatus}\r\n                  onChange={(e) => setLeaveStatus(e.target.value)}\r\n                  >\r\n                    <option value=''>Select Leave Status</option>\r\n                    <option value='approved'>APPROVED</option>\r\n                    <option value='reject'>REJECTED</option>\r\n                    <option value='pending'>PENDING</option>\r\n                </Form.Control>\r\n            </Form.Group>\r\n            <Button className='applyleave-btn mb-2 mr-3' type='submit'>\r\n              Update\r\n            </Button>\r\n          </Form>\r\n\t\t\t\t\t\r\n      \t</Col>\r\n      </Row>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UpdateMyLeave;","C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reducers\\userReducers.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reducers\\profileReducers.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reducers\\nextOfKinReducer.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reducers\\educationReducers.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\reducers\\leaveApplication.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\Message.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\AdminHeader2.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\Loader.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\SearchBox.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\Paginate.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\FixedNavbar.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\Header.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\actions\\userActions.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\actions\\leaveApplication.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\constants\\userConstants.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\constants\\leaveApplicationConstants.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\constants\\nextOfKinConstants.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\constants\\educationConstants.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\constants\\profileConstants.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\actions\\educationActions.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\components\\AdminHeader.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\actions\\nextOfKinActions.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\actions\\profileActions.js",[],"C:\\Users\\john.adibe\\Desktop\\OUTCESS\\human-resource-mgt\\src\\shared\\baseUrl.js",[],{"ruleId":"277","replacedBy":"278"},{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","severity":1,"message":"282","line":2,"column":34,"nodeType":"283","messageId":"284","endLine":2,"endColumn":43},{"ruleId":"281","severity":1,"message":"285","line":3,"column":10,"nodeType":"283","messageId":"284","endLine":3,"endColumn":14},{"ruleId":"281","severity":1,"message":"286","line":5,"column":8,"nodeType":"283","messageId":"284","endLine":5,"endColumn":14},{"ruleId":"281","severity":1,"message":"287","line":34,"column":13,"nodeType":"283","messageId":"284","endLine":34,"endColumn":20},{"ruleId":"281","severity":1,"message":"288","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":17},{"ruleId":"289","severity":1,"message":"290","line":53,"column":8,"nodeType":"291","endLine":53,"endColumn":27,"suggestions":"292"},{"ruleId":"293","severity":1,"message":"294","line":65,"column":15,"nodeType":"295","endLine":65,"endColumn":36},{"ruleId":"293","severity":1,"message":"294","line":70,"column":15,"nodeType":"295","endLine":70,"endColumn":32},{"ruleId":"296","severity":1,"message":"297","line":109,"column":7,"nodeType":"298","endLine":109,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":2,"column":34,"nodeType":"283","messageId":"284","endLine":2,"endColumn":43},{"ruleId":"281","severity":1,"message":"285","line":3,"column":10,"nodeType":"283","messageId":"284","endLine":3,"endColumn":14},{"ruleId":"281","severity":1,"message":"285","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":3,"column":34,"nodeType":"283","messageId":"284","endLine":3,"endColumn":43},{"ruleId":"281","severity":1,"message":"285","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":14},{"ruleId":"281","severity":1,"message":"285","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":3,"column":34,"nodeType":"283","messageId":"284","endLine":3,"endColumn":43},{"ruleId":"281","severity":1,"message":"299","line":22,"column":21,"nodeType":"283","messageId":"284","endLine":22,"endColumn":31},{"ruleId":"281","severity":1,"message":"285","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":3,"column":28,"nodeType":"283","messageId":"284","endLine":3,"endColumn":37},{"ruleId":"281","severity":1,"message":"285","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":3,"column":28,"nodeType":"283","messageId":"284","endLine":3,"endColumn":37},{"ruleId":"281","severity":1,"message":"285","line":3,"column":10,"nodeType":"283","messageId":"284","endLine":3,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":4,"column":28,"nodeType":"283","messageId":"284","endLine":4,"endColumn":37},{"ruleId":"281","severity":1,"message":"285","line":3,"column":10,"nodeType":"283","messageId":"284","endLine":3,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":5,"column":35,"nodeType":"283","messageId":"284","endLine":5,"endColumn":44},{"ruleId":"281","severity":1,"message":"285","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":3,"column":28,"nodeType":"283","messageId":"284","endLine":3,"endColumn":37},{"ruleId":"281","severity":1,"message":"300","line":40,"column":19,"nodeType":"283","messageId":"284","endLine":40,"endColumn":30},{"ruleId":"281","severity":1,"message":"301","line":43,"column":19,"nodeType":"283","messageId":"284","endLine":43,"endColumn":30},{"ruleId":"281","severity":1,"message":"285","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":14},{"ruleId":"281","severity":1,"message":"302","line":7,"column":10,"nodeType":"283","messageId":"284","endLine":7,"endColumn":25},{"ruleId":"281","severity":1,"message":"300","line":32,"column":19,"nodeType":"283","messageId":"284","endLine":32,"endColumn":30},{"ruleId":"281","severity":1,"message":"301","line":35,"column":19,"nodeType":"283","messageId":"284","endLine":35,"endColumn":30},{"ruleId":"281","severity":1,"message":"303","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":23},{"ruleId":"281","severity":1,"message":"304","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":15},{"ruleId":"281","severity":1,"message":"305","line":8,"column":43,"nodeType":"283","messageId":"284","endLine":8,"endColumn":65},{"ruleId":"281","severity":1,"message":"306","line":9,"column":10,"nodeType":"283","messageId":"284","endLine":9,"endColumn":25},{"ruleId":"281","severity":1,"message":"307","line":22,"column":12,"nodeType":"283","messageId":"284","endLine":22,"endColumn":19},{"ruleId":"281","severity":1,"message":"299","line":22,"column":21,"nodeType":"283","messageId":"284","endLine":22,"endColumn":31},{"ruleId":"281","severity":1,"message":"308","line":30,"column":22,"nodeType":"283","messageId":"284","endLine":30,"endColumn":27},{"ruleId":"281","severity":1,"message":"309","line":2,"column":10,"nodeType":"283","messageId":"284","endLine":2,"endColumn":19},{"ruleId":"281","severity":1,"message":"310","line":4,"column":8,"nodeType":"283","messageId":"284","endLine":4,"endColumn":15},{"ruleId":"281","severity":1,"message":"286","line":5,"column":8,"nodeType":"283","messageId":"284","endLine":5,"endColumn":14},{"ruleId":"281","severity":1,"message":"311","line":6,"column":10,"nodeType":"283","messageId":"284","endLine":6,"endColumn":40},{"ruleId":"281","severity":1,"message":"312","line":6,"column":42,"nodeType":"283","messageId":"284","endLine":6,"endColumn":73},{"ruleId":"281","severity":1,"message":"313","line":6,"column":75,"nodeType":"283","messageId":"284","endLine":6,"endColumn":114},{"ruleId":"281","severity":1,"message":"314","line":7,"column":57,"nodeType":"283","messageId":"284","endLine":7,"endColumn":89},{"ruleId":"281","severity":1,"message":"315","line":9,"column":8,"nodeType":"283","messageId":"284","endLine":9,"endColumn":17},{"ruleId":"281","severity":1,"message":"316","line":25,"column":23,"nodeType":"283","messageId":"284","endLine":25,"endColumn":37},{"ruleId":"281","severity":1,"message":"287","line":36,"column":11,"nodeType":"283","messageId":"284","endLine":36,"endColumn":18},{"ruleId":"281","severity":1,"message":"300","line":39,"column":18,"nodeType":"283","messageId":"284","endLine":39,"endColumn":29},{"ruleId":"281","severity":1,"message":"301","line":42,"column":17,"nodeType":"283","messageId":"284","endLine":42,"endColumn":28},{"ruleId":"281","severity":1,"message":"317","line":12,"column":10,"nodeType":"283","messageId":"284","endLine":12,"endColumn":36},{"ruleId":"281","severity":1,"message":"318","line":28,"column":38,"nodeType":"283","messageId":"284","endLine":28,"endColumn":42},{"ruleId":"289","severity":1,"message":"319","line":41,"column":8,"nodeType":"291","endLine":41,"endColumn":17,"suggestions":"320"},{"ruleId":"293","severity":1,"message":"294","line":57,"column":21,"nodeType":"295","endLine":57,"endColumn":42},{"ruleId":"293","severity":1,"message":"294","line":62,"column":21,"nodeType":"295","endLine":62,"endColumn":38},{"ruleId":"293","severity":1,"message":"294","line":58,"column":21,"nodeType":"295","endLine":58,"endColumn":42},{"ruleId":"293","severity":1,"message":"294","line":63,"column":21,"nodeType":"295","endLine":63,"endColumn":38},{"ruleId":"281","severity":1,"message":"321","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":41},{"ruleId":"281","severity":1,"message":"311","line":6,"column":10,"nodeType":"283","messageId":"284","endLine":6,"endColumn":40},{"ruleId":"281","severity":1,"message":"312","line":6,"column":83,"nodeType":"283","messageId":"284","endLine":6,"endColumn":114},{"ruleId":"281","severity":1,"message":"308","line":25,"column":13,"nodeType":"283","messageId":"284","endLine":25,"endColumn":18},"no-native-reassign",["322"],"no-negated-in-lhs",["323"],"no-unused-vars","'ListGroup' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Loader' is defined but never used.","'loading' is assigned a value but never used.","'useForm' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["324"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'setMessage' is assigned a value but never used.","'errorUpdate' is assigned a value but never used.","'errorCreate' is assigned a value but never used.","'createNextOfKin' is defined but never used.","'LinkContainer' is defined but never used.","'Table' is defined but never used.","'EDUCATION_CREATE_RESET' is defined but never used.","'createEducation' is defined but never used.","'message' is assigned a value but never used.","'error' is assigned a value but never used.","'Container' is defined but never used.","'Message' is defined but never used.","'LEAVE_APPLICATION_CREATE_RESET' is defined but never used.","'LEAVE_APPLICATION_DETAILS_RESET' is defined but never used.","'LEAVE_APPLICATION_UPDATE_EMPLOYEE_RESET' is defined but never used.","'updateEmployeeLeaveApplicationId' is defined but never used.","'SearchBox' is defined but never used.","'setLeaveStatus' is assigned a value but never used.","'USER_FORGOT_PASSWORD_RESET' is defined but never used.","'user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'email'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMessage' needs the current value of 'email'.",["325"],"'getAllEmployeeLeaveApplications' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},"Update the dependencies array to be: [dispatch, history, userInfo]",{"range":"330","text":"331"},"Update the dependencies array to be: [email, success]",{"range":"332","text":"333"},[1668,1687],"[dispatch, history, userInfo]",[1489,1498],"[email, success]"]